{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CyberSec Toolkit\n\n## Overview\n\nCyberSec Toolkit is a comprehensive cybersecurity analysis suite built with React, Express, and TypeScript. The application provides multiple security tools including password analysis, phishing detection, port scanning, keylogger detection, and file integrity monitoring. It's designed as a full-stack web application with a modern dark-themed UI and real-time security analysis capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with a dark theme design system and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Build System**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript using ESM modules\n- **Framework**: Express.js for the REST API server\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Storage**: In-memory storage implementation with interfaces for future database integration\n- **API Design**: RESTful endpoints organized by security tool functionality\n\n### Security Services\nThe application implements five core security analysis services:\n- **Password Service**: Analyzes password strength, entropy, and crack time estimates\n- **Phishing Service**: Detects suspicious URLs and analyzes phishing indicators\n- **Port Service**: Performs network port scanning with service detection\n- **Keylogger Service**: Scans running processes for suspicious keylogger behavior\n- **File Integrity Service**: Monitors file systems for unauthorized changes\n\n### Database Schema\nUses PostgreSQL with three main tables:\n- **Users**: Authentication and user management\n- **Scan Results**: Stores all security scan results with timestamps and scores\n- **Monitored Files**: Tracks file integrity baselines and change detection\n\n### Development Workflow\n- **Development Mode**: Vite dev server with HMR and Express API proxy\n- **Production Build**: Static asset generation with server-side bundling using esbuild\n- **Type Safety**: Shared TypeScript schemas between client and server using Zod validation\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL database service\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Connection**: Uses DATABASE_URL environment variable for database connectivity\n\n### UI Components\n- **Radix UI**: Headless component library for accessibility and behavior\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Replit Integration**: Custom plugins for development environment support\n- **Vite Plugins**: Runtime error overlay and development tooling\n- **TypeScript**: Full-stack type safety with strict mode enabled\n\n### Runtime Dependencies\n- **Express Session**: Session management with PostgreSQL store\n- **React Query**: Server state synchronization and caching\n- **Wouter**: Lightweight routing for single-page application navigation\n\nThe application follows a modular architecture with clear separation between security services, API routes, and frontend components, enabling easy extension and maintenance of security tools.","size_bytes":3503},"start-production.js":{"content":"#!/usr/bin/env node\n\n/**\n * Production startup script for SolarSense AI\n * Handles environment validation and server initialization\n */\n\nimport { spawn } from \"child_process\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Environment validation\nconst requiredEnvVars = [\"DATABASE_URL\", \"GOOGLE_API_KEY\"];\nconst missingVars = requiredEnvVars.filter((varName) => !process.env[varName]);\n\nif (missingVars.length > 0) {\n  console.error(\"❌ Missing required environment variables:\");\n  missingVars.forEach((varName) => {\n    console.error(`   - ${varName}`);\n  });\n  console.error(\n    \"\\nPlease ensure all required environment variables are set before starting the production server.\"\n  );\n  process.exit(1);\n}\n\n// Validate Google API key format\nconst apiKey = process.env.GOOGLE_API_KEY;\nif (!apiKey || apiKey.length < 30) {\n  console.error(\n    \"❌ Invalid GOOGLE_API_KEY format. Please ensure you have a valid Google AI API key.\"\n  );\n  process.exit(1);\n}\n\n// Validate database URL format\nconst dbUrl = process.env.DATABASE_URL;\nif (!dbUrl.startsWith(\"postgresql://\")) {\n  console.error(\n    \"❌ Invalid DATABASE_URL format. Expected PostgreSQL connection string.\"\n  );\n  process.exit(1);\n}\n\nconsole.log(\"✅ Environment validation passed\");\nconsole.log(\"🚀 Starting SolarSense AI production server...\");\n\n// Set production environment\nprocess.env.NODE_ENV = \"production\";\n\n// Start the production server with production environment\nconst serverPath = path.join(__dirname, \"dist\", \"index.js\");\nconst server = spawn(\"node\", [serverPath], {\n  stdio: \"inherit\",\n  env: {\n    ...process.env,\n    NODE_ENV: \"production\",\n  },\n});\n\n// Handle server process events\nserver.on(\"error\", (error) => {\n  console.error(\"❌ Failed to start server:\", error.message);\n  process.exit(1);\n});\n\nserver.on(\"exit\", (code, signal) => {\n  if (signal) {\n    console.log(`🛑 Server terminated by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.error(`❌ Server exited with code: ${code}`);\n    process.exit(code);\n  } else {\n    console.log(\"✅ Server shut down gracefully\");\n  }\n});\n\n// Handle process termination\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully...\");\n  server.kill(\"SIGTERM\");\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully...\");\n  server.kill(\"SIGINT\");\n});\n","size_bytes":2483},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":485},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n\n// Add CORS headers for development  \napp.use((req, res, next) => {\n  const origin = req.headers.origin;\n  res.header('Access-Control-Allow-Origin', origin || '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS,PATCH');\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With,content-type,Authorization');\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    console.error(\"Server error:\", err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2589},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { PasswordService } from \"./services/password-service\";\nimport { PhishingService } from \"./services/phishing-service\";\nimport { PortService } from \"./services/port-service\";\nimport { KeyloggerService } from \"./services/keylogger-service\";\nimport { FileIntegrityService } from \"./services/file-integrity-service\";\nimport { \n  passwordAnalysisRequestSchema,\n  phishingAnalysisRequestSchema,\n  portScanRequestSchema,\n  fileMonitorRequestSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const passwordService = new PasswordService();\n  const phishingService = new PhishingService();\n  const portService = new PortService();\n  const keyloggerService = new KeyloggerService();\n  const fileIntegrityService = new FileIntegrityService();\n\n\n  // Password Analysis\n  app.post(\"/api/security/password-analysis\", async (req, res) => {\n    try {\n      const { password } = passwordAnalysisRequestSchema.parse(req.body);\n      const analysis = passwordService.analyzePassword(password);\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Phishing URL Detection\n  app.post(\"/api/security/phishing-analysis\", async (req, res) => {\n    try {\n      const { url } = phishingAnalysisRequestSchema.parse(req.body);\n      const analysis = phishingService.analyzeUrl(url);\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Port Scanning\n  app.post(\"/api/security/port-scan\", async (req, res) => {\n    try {\n      const { target, portRange } = portScanRequestSchema.parse(req.body);\n      const result = await portService.scanPorts(target, portRange);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Quick port scan for common ports\n  app.post(\"/api/security/port-scan-quick\", async (req, res) => {\n    try {\n      const { target } = req.body;\n      if (!target) {\n        return res.status(400).json({ message: \"Target is required\" });\n      }\n      \n      const result = await portService.quickScan(target);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Keylogger Detection\n  app.post(\"/api/security/keylogger-scan\", async (req, res) => {\n    try {\n      const result = await keyloggerService.detectKeyloggers();\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Terminate suspicious process\n  app.post(\"/api/security/terminate-process\", async (req, res) => {\n    try {\n      const { pid } = req.body;\n      if (!pid) {\n        return res.status(400).json({ message: \"Process ID is required\" });\n      }\n      \n      const success = await keyloggerService.terminateProcess(parseInt(pid));\n      res.json({ success });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // File Integrity Monitoring\n  app.post(\"/api/security/file-integrity-init\", async (req, res) => {\n    try {\n      const { directory, recursive } = fileMonitorRequestSchema.parse(req.body);\n      await fileIntegrityService.initializeBaseline(directory, recursive);\n      \n      const baselineInfo = fileIntegrityService.getBaselineInfo();\n      res.json({ \n        message: \"Baseline initialized successfully\",\n        ...baselineInfo\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/security/file-integrity-check\", async (req, res) => {\n    try {\n      const { directory, recursive } = fileMonitorRequestSchema.parse(req.body);\n      const result = await fileIntegrityService.checkIntegrity(directory, recursive);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/security/file-integrity-update\", async (req, res) => {\n    try {\n      const { directory, recursive } = fileMonitorRequestSchema.parse(req.body);\n      await fileIntegrityService.updateBaseline(directory, recursive);\n      \n      const baselineInfo = fileIntegrityService.getBaselineInfo();\n      res.json({ \n        message: \"Baseline updated successfully\",\n        ...baselineInfo\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4610},"server/storage.ts":{"content":"import { type User, type InsertUser, type ScanResult, type InsertScanResult, type MonitoredFile, type InsertMonitoredFile, users, scanResults, monitoredFiles } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createScanResult(scanResult: InsertScanResult): Promise<ScanResult>;\n  getScanResults(type?: string): Promise<ScanResult[]>;\n  getUserScanResults(userId: string, type?: string): Promise<ScanResult[]>;\n  \n  createMonitoredFile(file: InsertMonitoredFile): Promise<MonitoredFile>;\n  getMonitoredFiles(): Promise<MonitoredFile[]>;\n  updateMonitoredFile(id: string, updates: Partial<MonitoredFile>): Promise<MonitoredFile | undefined>;\n  deleteMonitoredFile(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createScanResult(insertScanResult: InsertScanResult): Promise<ScanResult> {\n    const [scanResult] = await db\n      .insert(scanResults)\n      .values({\n        ...insertScanResult,\n        score: insertScanResult.score ?? null,\n      })\n      .returning();\n    return scanResult;\n  }\n\n  async getScanResults(type?: string): Promise<ScanResult[]> {\n    const query = db.select().from(scanResults);\n    const results = type \n      ? await query.where(eq(scanResults.type, type))\n      : await query;\n    \n    return results.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n\n  async getUserScanResults(userId: string, type?: string): Promise<ScanResult[]> {\n    const whereCondition = type \n      ? and(eq(scanResults.userId, userId), eq(scanResults.type, type))\n      : eq(scanResults.userId, userId);\n    \n    const results = await db.select().from(scanResults).where(whereCondition);\n    \n    return results.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n\n  async createMonitoredFile(insertFile: InsertMonitoredFile): Promise<MonitoredFile> {\n    const [file] = await db\n      .insert(monitoredFiles)\n      .values({\n        ...insertFile,\n        isActive: true,\n      })\n      .returning();\n    return file;\n  }\n\n  async getMonitoredFiles(): Promise<MonitoredFile[]> {\n    return await db\n      .select()\n      .from(monitoredFiles)\n      .where(eq(monitoredFiles.isActive, true));\n  }\n\n  async updateMonitoredFile(id: string, updates: Partial<MonitoredFile>): Promise<MonitoredFile | undefined> {\n    const [updated] = await db\n      .update(monitoredFiles)\n      .set(updates)\n      .where(eq(monitoredFiles.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteMonitoredFile(id: string): Promise<boolean> {\n    const result = await db\n      .delete(monitoredFiles)\n      .where(eq(monitoredFiles.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3809},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for session persistence\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const scanResults = pgTable(\"scan_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\").notNull(), // 'password', 'phishing', 'port', 'keylogger', 'file_integrity'\n  target: text(\"target\").notNull(),\n  result: text(\"result\").notNull(), // JSON string\n  score: integer(\"score\"),\n  userId: varchar(\"user_id\"), // Optional - null for guest scans\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const monitoredFiles = pgTable(\"monitored_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filePath: text(\"file_path\").notNull(),\n  hash: text(\"hash\").notNull(),\n  size: integer(\"size\").notNull(),\n  lastModified: timestamp(\"last_modified\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  name: true,\n  password: true,\n});\n\nexport const signupRequestSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginRequestSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nexport const insertScanResultSchema = createInsertSchema(scanResults).pick({\n  type: true,\n  target: true,\n  result: true,\n  score: true,\n  userId: true,\n});\n\nexport const insertMonitoredFileSchema = createInsertSchema(monitoredFiles).pick({\n  filePath: true,\n  hash: true,\n  size: true,\n  lastModified: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ScanResult = typeof scanResults.$inferSelect;\nexport type InsertScanResult = z.infer<typeof insertScanResultSchema>;\nexport type MonitoredFile = typeof monitoredFiles.$inferSelect;\nexport type InsertMonitoredFile = z.infer<typeof insertMonitoredFileSchema>;\n\n// API Request/Response schemas\nexport const passwordAnalysisRequestSchema = z.object({\n  password: z.string().min(1),\n});\n\nexport const phishingAnalysisRequestSchema = z.object({\n  url: z.string().url(),\n});\n\nexport const portScanRequestSchema = z.object({\n  target: z.string().min(1),\n  portRange: z.string().optional().default(\"1-1000\"),\n});\n\nexport const fileMonitorRequestSchema = z.object({\n  directory: z.string().min(1),\n  recursive: z.boolean().default(true),\n});\n\nexport type PasswordAnalysisRequest = z.infer<typeof passwordAnalysisRequestSchema>;\nexport type PhishingAnalysisRequest = z.infer<typeof phishingAnalysisRequestSchema>;\nexport type PortScanRequest = z.infer<typeof portScanRequestSchema>;\nexport type FileMonitorRequest = z.infer<typeof fileMonitorRequestSchema>;\nexport type SignupRequest = z.infer<typeof signupRequestSchema>;\nexport type LoginRequest = z.infer<typeof loginRequestSchema>;\n","size_bytes":3945},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Layout } from \"@/components/layout/layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PasswordAnalyzerPage from \"@/pages/password-analyzer-page\";\nimport PhishingDetectorPage from \"@/pages/phishing-detector-page\";\nimport PortScannerPage from \"@/pages/port-scanner-page\";\nimport KeyloggerDetectorPage from \"@/pages/keylogger-detector-page\";\nimport FileIntegrityPage from \"@/pages/file-integrity-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Main App Routes (With Layout) */}\n      <Route path=\"/\">\n        <Layout>\n          <Dashboard />\n        </Layout>\n      </Route>\n      <Route path=\"/password-analyzer\">\n        <Layout>\n          <PasswordAnalyzerPage />\n        </Layout>\n      </Route>\n      <Route path=\"/phishing-detector\">\n        <Layout>\n          <PhishingDetectorPage />\n        </Layout>\n      </Route>\n      <Route path=\"/port-scanner\">\n        <Layout>\n          <PortScannerPage />\n        </Layout>\n      </Route>\n      <Route path=\"/keylogger-detector\">\n        <Layout>\n          <KeyloggerDetectorPage />\n        </Layout>\n      </Route>\n      <Route path=\"/file-integrity\">\n        <Layout>\n          <FileIntegrityPage />\n        </Layout>\n      </Route>\n      <Route>\n        <Layout>\n          <NotFound />\n        </Layout>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1843},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light mode colors */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(224 71% 4%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(224 71% 4%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(224 71% 4%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(210 20% 98%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(222 84% 5%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(158 64% 52%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(158 64% 52%);\n  --chart-3: hsl(43 96% 56%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(270 95% 75%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(224 71% 4%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(210 20% 98%);\n  --sidebar-accent: hsl(158 64% 52%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 2px 4px -1px hsl(217 91% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 4px 6px -1px hsl(217 91% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 8px 10px -1px hsl(217 91% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Dark mode colors */\n  --background: hsl(210 20% 8%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(210 20% 12%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(210 20% 12%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(210 20% 98%);\n  --secondary: hsl(210 20% 16%);\n  --secondary-foreground: hsl(213 31% 91%);\n  --muted: hsl(210 20% 16%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(158 64% 52%);\n  --accent-foreground: hsl(210 20% 8%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(210 20% 18%);\n  --input: hsl(210 20% 16%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(158 64% 52%);\n  --chart-3: hsl(43 96% 56%);\n  --chart-4: hsl(0 84% 60%);\n  --chart-5: hsl(270 95% 75%);\n  --sidebar: hsl(210 20% 12%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(210 20% 98%);\n  --sidebar-accent: hsl(158 64% 52%);\n  --sidebar-accent-foreground: hsl(210 20% 8%);\n  --sidebar-border: hsl(210 20% 18%);\n  --sidebar-ring: hsl(217 91% 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3426},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/file-integrity-service.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\nimport crypto from 'crypto';\n\nexport interface FileIntegrityResult {\n  directory: string;\n  totalFiles: number;\n  changes: FileChange[];\n  statistics: {\n    modified: number;\n    added: number;\n    deleted: number;\n    unchanged: number;\n  };\n  riskAssessment: {\n    level: 'low' | 'medium' | 'high' | 'critical';\n    criticalChanges: number;\n    suspiciousPatterns: string[];\n  };\n  lastScan: Date;\n}\n\nexport interface FileChange {\n  type: 'added' | 'modified' | 'deleted';\n  filePath: string;\n  oldHash?: string;\n  newHash?: string;\n  size?: number;\n  permissions?: string;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  reasons?: string[];\n  timestamp: Date;\n}\n\nexport interface MonitoredFileInfo {\n  path: string;\n  hash: string;\n  size: number;\n  lastModified: Date;\n}\n\nexport class FileIntegrityService {\n  private baseline: Map<string, MonitoredFileInfo> = new Map();\n\n  async initializeBaseline(directory: string, recursive: boolean = true): Promise<void> {\n    const files = await this.scanDirectory(directory, recursive);\n    this.baseline.clear();\n    \n    for (const file of files) {\n      this.baseline.set(file.path, file);\n    }\n  }\n\n  async checkIntegrity(directory: string, recursive: boolean = true): Promise<FileIntegrityResult> {\n    const currentFiles = await this.scanDirectory(directory, recursive);\n    const changes: FileChange[] = [];\n    const statistics = {\n      modified: 0,\n      added: 0,\n      deleted: 0,\n      unchanged: 0\n    };\n\n    // Create a map of current files for easier lookup\n    const currentFileMap = new Map<string, MonitoredFileInfo>();\n    currentFiles.forEach(file => currentFileMap.set(file.path, file));\n\n    // Check for modifications and deletions\n    for (const [filePath, baselineFile] of Array.from(this.baseline.entries())) {\n      const currentFile = currentFileMap.get(filePath);\n      \n      if (!currentFile) {\n        // File was deleted\n        const riskLevel = this.assessFileRisk(filePath, 'deleted');\n        changes.push({\n          type: 'deleted',\n          filePath,\n          oldHash: baselineFile.hash,\n          riskLevel,\n          reasons: this.getChangeReasons(filePath, 'deleted'),\n          timestamp: new Date()\n        });\n        statistics.deleted++;\n      } else if (currentFile.hash !== baselineFile.hash) {\n        // File was modified\n        const riskLevel = this.assessFileRisk(filePath, 'modified');\n        changes.push({\n          type: 'modified',\n          filePath,\n          oldHash: baselineFile.hash,\n          newHash: currentFile.hash,\n          size: currentFile.size,\n          riskLevel,\n          reasons: this.getChangeReasons(filePath, 'modified'),\n          timestamp: new Date()\n        });\n        statistics.modified++;\n      } else {\n        statistics.unchanged++;\n      }\n    }\n\n    // Check for new files\n    for (const currentFile of currentFiles) {\n      if (!this.baseline.has(currentFile.path)) {\n        const riskLevel = this.assessFileRisk(currentFile.path, 'added');\n        changes.push({\n          type: 'added',\n          filePath: currentFile.path,\n          newHash: currentFile.hash,\n          size: currentFile.size,\n          riskLevel,\n          reasons: this.getChangeReasons(currentFile.path, 'added'),\n          timestamp: new Date()\n        });\n        statistics.added++;\n      }\n    }\n\n    // Assess risk level of changes\n    const riskAssessment = this.assessRisk(changes);\n\n    return {\n      directory,\n      totalFiles: currentFiles.length,\n      changes: changes.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime()),\n      statistics,\n      riskAssessment,\n      lastScan: new Date()\n    };\n  }\n\n  async updateBaseline(directory: string, recursive: boolean = true): Promise<void> {\n    await this.initializeBaseline(directory, recursive);\n  }\n\n  private async scanDirectory(directory: string, recursive: boolean): Promise<MonitoredFileInfo[]> {\n    const files: MonitoredFileInfo[] = [];\n\n    try {\n      const entries = await fs.readdir(directory, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(directory, entry.name);\n\n        if (entry.isFile()) {\n          try {\n            const fileInfo = await this.getFileInfo(fullPath);\n            files.push(fileInfo);\n          } catch (error) {\n            console.warn(`Skipping file ${fullPath}: ${error}`);\n          }\n        } else if (entry.isDirectory() && recursive) {\n          // Skip hidden directories and common system directories\n          if (!entry.name.startsWith('.') && \n              !['node_modules', '__pycache__', '.git', '.svn'].includes(entry.name)) {\n            const subdirFiles = await this.scanDirectory(fullPath, recursive);\n            files.push(...subdirFiles);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(`Error scanning directory ${directory}:`, error);\n    }\n\n    return files;\n  }\n\n  private async getFileInfo(filePath: string): Promise<MonitoredFileInfo> {\n    const stats = await fs.stat(filePath);\n    const hash = await this.calculateFileHash(filePath);\n\n    return {\n      path: filePath,\n      hash,\n      size: stats.size,\n      lastModified: stats.mtime\n    };\n  }\n\n  private async calculateFileHash(filePath: string): Promise<string> {\n    const data = await fs.readFile(filePath);\n    return crypto.createHash('sha256').update(data).digest('hex');\n  }\n\n  async getFileContent(filePath: string): Promise<string> {\n    try {\n      const data = await fs.readFile(filePath, 'utf-8');\n      return data;\n    } catch (error) {\n      throw new Error(`Cannot read file: ${error}`);\n    }\n  }\n\n  async isFileText(filePath: string): Promise<boolean> {\n    try {\n      const buffer = await fs.readFile(filePath);\n      const sample = buffer.slice(0, 1024);\n      \n      // Check for null bytes (common in binary files)\n      for (let i = 0; i < sample.length; i++) {\n        if (sample[i] === 0) return false;\n      }\n      \n      // Check if most characters are printable ASCII\n      let printableCount = 0;\n      for (let i = 0; i < sample.length; i++) {\n        const char = sample[i];\n        if ((char >= 32 && char <= 126) || char === 9 || char === 10 || char === 13) {\n          printableCount++;\n        }\n      }\n      \n      return printableCount / sample.length > 0.7;\n    } catch {\n      return false;\n    }\n  }\n\n  getBaselineInfo(): { totalFiles: number; directories: string[] } {\n    const directories = new Set<string>();\n    for (const filePath of Array.from(this.baseline.keys())) {\n      directories.add(path.dirname(filePath));\n    }\n\n    return {\n      totalFiles: this.baseline.size,\n      directories: Array.from(directories).sort()\n    };\n  }\n\n  exportBaseline(): MonitoredFileInfo[] {\n    return Array.from(this.baseline.values());\n  }\n\n  importBaseline(baseline: MonitoredFileInfo[]): void {\n    this.baseline.clear();\n    baseline.forEach(file => this.baseline.set(file.path, file));\n  }\n\n  private assessFileRisk(filePath: string, changeType: 'added' | 'modified' | 'deleted'): 'low' | 'medium' | 'high' | 'critical' {\n    const fileName = path.basename(filePath).toLowerCase();\n    const fileExt = path.extname(filePath).toLowerCase();\n    const dirPath = path.dirname(filePath).toLowerCase();\n\n    // Critical risk files\n    if (fileName.includes('password') || fileName.includes('secret') || fileName.includes('key')) {\n      return 'critical';\n    }\n    if (['.exe', '.dll', '.bat', '.cmd', '.ps1', '.sh'].includes(fileExt)) {\n      return 'critical';\n    }\n    if (dirPath.includes('system32') || dirPath.includes('windows') || dirPath.includes('/etc/') || dirPath.includes('/bin/')) {\n      return 'critical';\n    }\n\n    // High risk files\n    if (['.config', '.ini', '.cfg', '.conf'].includes(fileExt)) {\n      return 'high';\n    }\n    if (fileName.includes('config') || fileName.includes('setting')) {\n      return 'high';\n    }\n\n    // Medium risk files\n    if (['.js', '.py', '.php', '.sql', '.json'].includes(fileExt)) {\n      return 'medium';\n    }\n\n    // Low risk for common file types\n    if (['.txt', '.log', '.tmp', '.cache'].includes(fileExt)) {\n      return 'low';\n    }\n\n    return 'medium';\n  }\n\n  private getChangeReasons(filePath: string, changeType: 'added' | 'modified' | 'deleted'): string[] {\n    const reasons: string[] = [];\n    const fileName = path.basename(filePath).toLowerCase();\n    const fileExt = path.extname(filePath).toLowerCase();\n    const dirPath = path.dirname(filePath).toLowerCase();\n\n    if (changeType === 'added') {\n      reasons.push('New file detected');\n      if (['.exe', '.dll'].includes(fileExt)) {\n        reasons.push('Executable file added - potential security risk');\n      }\n    } else if (changeType === 'modified') {\n      if (fileName.includes('config')) {\n        reasons.push('Configuration file modified');\n      }\n      if (fileName.includes('log')) {\n        reasons.push('Log file updated');\n      }\n    } else if (changeType === 'deleted') {\n      reasons.push('File removed from system');\n      if (['.exe', '.dll'].includes(fileExt)) {\n        reasons.push('System file deleted - potential integrity issue');\n      }\n    }\n\n    return reasons;\n  }\n\n  private assessRisk(changes: FileChange[]): FileIntegrityResult['riskAssessment'] {\n    const criticalChanges = changes.filter(c => c.riskLevel === 'critical').length;\n    const highChanges = changes.filter(c => c.riskLevel === 'high').length;\n    \n    const suspiciousPatterns: string[] = [];\n    \n    // Detect mass file operations\n    if (changes.length > 50) {\n      suspiciousPatterns.push('Mass file operation detected');\n    }\n    \n    // Detect executable changes\n    const executableChanges = changes.filter(c => \n      path.extname(c.filePath).toLowerCase() === '.exe' ||\n      path.extname(c.filePath).toLowerCase() === '.dll'\n    ).length;\n    \n    if (executableChanges > 0) {\n      suspiciousPatterns.push(`${executableChanges} executable file(s) modified`);\n    }\n    \n    // Detect system file changes\n    const systemFileChanges = changes.filter(c => \n      c.filePath.toLowerCase().includes('system32') ||\n      c.filePath.toLowerCase().includes('windows') ||\n      c.filePath.toLowerCase().includes('/etc/') ||\n      c.filePath.toLowerCase().includes('/bin/')\n    ).length;\n    \n    if (systemFileChanges > 0) {\n      suspiciousPatterns.push(`${systemFileChanges} system file(s) affected`);\n    }\n\n    // Determine overall risk level\n    let level: 'low' | 'medium' | 'high' | 'critical';\n    if (criticalChanges > 5 || systemFileChanges > 10) {\n      level = 'critical';\n    } else if (criticalChanges > 0 || highChanges > 10 || executableChanges > 5) {\n      level = 'high';\n    } else if (highChanges > 0 || changes.length > 20) {\n      level = 'medium';\n    } else {\n      level = 'low';\n    }\n\n    return {\n      level,\n      criticalChanges,\n      suspiciousPatterns\n    };\n  }\n}\n","size_bytes":10935},"server/services/keylogger-service.ts":{"content":"import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface KeyloggerDetectionResult {\n  processesScanned: number;\n  suspiciousProcesses: SuspiciousProcess[];\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  recommendations: string[];\n  timestamp: Date;\n}\n\nexport interface SuspiciousProcess {\n  pid: number;\n  name: string;\n  command: string;\n  riskScore: number;\n  reasons: string[];\n  user?: string;\n  cpuUsage?: number;\n  memoryUsage?: number;\n}\n\nconst SUSPICIOUS_KEYWORDS = [\n  'keylog', 'keystroke', 'capture', 'hook', 'monitor', 'record',\n  'spy', 'stealth', 'hidden', 'invisible', 'backdoor', 'trojan',\n  'rat', 'remote', 'access', 'screen', 'capture', 'logger',\n  'dump', 'harvest', 'steal', 'inject', 'payload', 'shell',\n  'reverse', 'bind', 'tunnel', 'persistence', 'privilege',\n  'escalation', 'bypass', 'evasion', 'rootkit', 'malware'\n];\n\nconst SUSPICIOUS_PROCESSES = [\n  'keylogger', 'spyware', 'malware', 'rootkit', 'backdoor',\n  'remote_access', 'rat', 'trojan', 'virus', 'worm'\n];\n\nconst LEGITIMATE_PROCESSES = [\n  'explorer.exe', 'chrome.exe', 'firefox.exe', 'notepad.exe',\n  'code.exe', 'powershell.exe', 'cmd.exe', 'taskmgr.exe',\n  'winlogon.exe', 'csrss.exe', 'lsass.exe', 'services.exe',\n  'svchost.exe', 'dwm.exe', 'conhost.exe', 'RuntimeBroker.exe',\n  'dllhost.exe', 'SearchIndexer.exe', 'audiodg.exe', 'wininit.exe',\n  'spoolsv.exe', 'WmiPrvSE.exe', 'MsMpEng.exe', 'SecurityHealthService.exe',\n  'node.exe', 'python.exe', 'java.exe', 'msedge.exe', 'opera.exe',\n  'safari.exe', 'teams.exe', 'slack.exe', 'discord.exe', 'zoom.exe'\n];\n\nexport class KeyloggerService {\n  async detectKeyloggers(): Promise<KeyloggerDetectionResult> {\n    const processes = await this.getRunningProcesses();\n    const suspiciousProcesses: SuspiciousProcess[] = [];\n\n    for (const process of processes) {\n      const analysis = this.analyzeProcess(process);\n      if (analysis.riskScore > 30) {\n        suspiciousProcesses.push(analysis);\n      }\n    }\n\n    const riskLevel = this.calculateOverallRisk(suspiciousProcesses);\n    const recommendations = this.generateRecommendations(suspiciousProcesses, riskLevel);\n\n    return {\n      processesScanned: processes.length,\n      suspiciousProcesses: suspiciousProcesses.sort((a, b) => b.riskScore - a.riskScore),\n      riskLevel,\n      recommendations,\n      timestamp: new Date()\n    };\n  }\n\n  private async getRunningProcesses(): Promise<any[]> {\n    try {\n      let command: string;\n      const platform = process.platform;\n\n      if (platform === 'win32') {\n        command = 'wmic process get Name,ProcessId,CommandLine,PageFileUsage,WorkingSetSize /format:csv';\n      } else if (platform === 'darwin' || platform === 'linux') {\n        command = 'ps aux';\n      } else {\n        throw new Error('Unsupported platform for process monitoring');\n      }\n\n      const { stdout } = await execAsync(command);\n      return this.parseProcessOutput(stdout, platform);\n    } catch (error) {\n      console.error('Error getting processes:', error);\n      return [];\n    }\n  }\n\n  private parseProcessOutput(output: string, platform: string): any[] {\n    const processes: any[] = [];\n    const lines = output.split('\\n').filter(line => line.trim());\n\n    if (platform === 'win32') {\n      // Parse Windows WMIC output\n      for (let i = 1; i < lines.length; i++) {\n        const parts = lines[i].split(',');\n        if (parts.length >= 4 && parts[1] && parts[2]) {\n          processes.push({\n            pid: parseInt(parts[2]) || 0,\n            name: parts[1].trim(),\n            command: parts[0] || '',\n            memoryUsage: parseInt(parts[4]) || 0,\n            user: 'unknown'\n          });\n        }\n      }\n    } else {\n      // Parse Unix ps output\n      for (let i = 1; i < lines.length; i++) {\n        const parts = lines[i].trim().split(/\\s+/);\n        if (parts.length >= 11) {\n          processes.push({\n            pid: parseInt(parts[1]) || 0,\n            name: parts[10] || 'unknown',\n            command: parts.slice(10).join(' '),\n            cpuUsage: parseFloat(parts[2]) || 0,\n            memoryUsage: parseFloat(parts[3]) || 0,\n            user: parts[0]\n          });\n        }\n      }\n    }\n\n    return processes;\n  }\n\n  private analyzeProcess(process: any): SuspiciousProcess {\n    let riskScore = 0;\n    const reasons: string[] = [];\n\n    const processName = process.name.toLowerCase();\n    const command = process.command.toLowerCase();\n\n    // Check for suspicious keywords\n    for (const keyword of SUSPICIOUS_KEYWORDS) {\n      if (processName.includes(keyword) || command.includes(keyword)) {\n        riskScore += 25;\n        reasons.push(`Contains suspicious keyword: ${keyword}`);\n      }\n    }\n\n    // Check for known suspicious process names\n    for (const suspiciousName of SUSPICIOUS_PROCESSES) {\n      if (processName.includes(suspiciousName)) {\n        riskScore += 40;\n        reasons.push(`Matches known suspicious process pattern: ${suspiciousName}`);\n      }\n    }\n\n    // Check for hidden or system-like names\n    if (this.looksLikeSystemProcess(processName) && !this.isLegitimateSystemProcess(processName)) {\n      riskScore += 20;\n      reasons.push('Mimics system process name');\n    }\n\n    // Check for unusual file extensions\n    if (processName.endsWith('.tmp') || processName.endsWith('.dll') || \n        processName.includes('temp') || processName.includes('cache')) {\n      riskScore += 15;\n      reasons.push('Unusual process location or extension');\n    }\n\n    // Check for processes without proper paths\n    if (!command.includes('\\\\') && !command.includes('/') && command.length > 0) {\n      riskScore += 10;\n      reasons.push('Process running without full path');\n    }\n\n    // Check for high resource usage (potential sign of monitoring activity)\n    if (process.cpuUsage > 50) {\n      riskScore += 10;\n      reasons.push('High CPU usage');\n    }\n\n    // Check for random-looking names\n    if (this.hasRandomName(processName)) {\n      riskScore += 15;\n      reasons.push('Random or obfuscated process name');\n    }\n\n    return {\n      pid: process.pid,\n      name: process.name,\n      command: process.command,\n      riskScore,\n      reasons,\n      user: process.user,\n      cpuUsage: process.cpuUsage,\n      memoryUsage: process.memoryUsage\n    };\n  }\n\n  private looksLikeSystemProcess(name: string): boolean {\n    const systemPatterns = [\n      /^sys/, /^win/, /^microsoft/, /^windows/, /^service/,\n      /\\.exe$/, /^lsass/, /^csrss/, /^winlogon/\n    ];\n    return systemPatterns.some(pattern => pattern.test(name));\n  }\n\n  private isLegitimateSystemProcess(name: string): boolean {\n    return LEGITIMATE_PROCESSES.some(legit => \n      name.toLowerCase().includes(legit.toLowerCase())\n    );\n  }\n\n  private hasRandomName(name: string): boolean {\n    // Check for patterns that suggest random generation\n    const randomPatterns = [\n      /^[a-z]{8,}\\.exe$/, // Long random lowercase\n      /^[A-Z]{5,}\\.exe$/, // Long random uppercase\n      /^[a-zA-Z0-9]{12,}\\.exe$/, // Very long alphanumeric\n      /^[a-f0-9]{8,}\\.exe$/, // Hex-like names\n      /^[0-9]{6,}\\.exe$/, // All numbers\n      /^[a-zA-Z]{2}[0-9]{4,}\\.exe$/, // Mixed patterns\n      /^tmp[a-zA-Z0-9]+\\.exe$/, // Temp file patterns\n    ];\n    \n    // Check for entropy in the name (measure of randomness)\n    const entropy = this.calculateStringEntropy(name.replace(/\\.[^.]*$/, ''));\n    \n    return randomPatterns.some(pattern => pattern.test(name)) || entropy > 4.2;\n  }\n\n  private calculateStringEntropy(str: string): number {\n    const freq: { [key: string]: number } = {};\n    for (const char of str) {\n      freq[char] = (freq[char] || 0) + 1;\n    }\n    \n    let entropy = 0;\n    const len = str.length;\n    for (const count of Object.values(freq)) {\n      const p = count / len;\n      entropy -= p * Math.log2(p);\n    }\n    \n    return entropy;\n  }\n\n  private calculateOverallRisk(suspiciousProcesses: SuspiciousProcess[]): KeyloggerDetectionResult['riskLevel'] {\n    if (suspiciousProcesses.length === 0) return 'low';\n\n    const maxRiskScore = Math.max(...suspiciousProcesses.map(p => p.riskScore));\n    const totalRiskScore = suspiciousProcesses.reduce((sum, p) => sum + p.riskScore, 0);\n\n    if (maxRiskScore >= 80 || totalRiskScore >= 150) return 'critical';\n    if (maxRiskScore >= 60 || totalRiskScore >= 100) return 'high';\n    if (maxRiskScore >= 40 || totalRiskScore >= 60) return 'medium';\n    return 'low';\n  }\n\n  private generateRecommendations(\n    suspiciousProcesses: SuspiciousProcess[], \n    riskLevel: KeyloggerDetectionResult['riskLevel']\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (riskLevel === 'critical') {\n      recommendations.push('URGENT: Immediately terminate suspicious processes');\n      recommendations.push('Disconnect from network to prevent data exfiltration');\n      recommendations.push('Run full system antivirus scan');\n      recommendations.push('Contact your security team immediately');\n    }\n\n    if (riskLevel === 'high') {\n      recommendations.push('Investigate suspicious processes immediately');\n      recommendations.push('Consider isolating the system');\n      recommendations.push('Run comprehensive malware scan');\n    }\n\n    if (suspiciousProcesses.length > 0) {\n      recommendations.push('Monitor process activity closely');\n      recommendations.push('Check process digital signatures');\n      recommendations.push('Verify process locations and origins');\n    }\n\n    recommendations.push('Keep antivirus software updated');\n    recommendations.push('Enable real-time protection');\n    recommendations.push('Regularly monitor running processes');\n    recommendations.push('Use application whitelisting if possible');\n\n    return recommendations;\n  }\n\n  async terminateProcess(pid: number): Promise<boolean> {\n    try {\n      const command = process.platform === 'win32' \n        ? `taskkill /F /PID ${pid}`\n        : `kill -9 ${pid}`;\n        \n      await execAsync(command);\n      return true;\n    } catch (error) {\n      console.error('Error terminating process:', error);\n      return false;\n    }\n  }\n}\n","size_bytes":10126},"server/services/password-service.ts":{"content":"import crypto from 'crypto';\n\nexport interface PasswordAnalysis {\n  score: number;\n  strength: 'very-weak' | 'weak' | 'medium' | 'strong' | 'very-strong';\n  criteria: {\n    length: boolean;\n    specialChars: boolean;\n    numbers: boolean;\n    upperCase: boolean;\n    lowerCase: boolean;\n    noDictionaryWords: boolean;\n  };\n  entropy: number;\n  suggestions: string[];\n  crackTime: string;\n}\n\nconst COMMON_PASSWORDS = [\n  'password', '123456', '123456789', 'qwerty', 'abc123', 'monkey', \n  'letmein', 'dragon', '111111', 'baseball', 'iloveyou', 'trustno1',\n  'sunshine', 'master', 'welcome', 'shadow', 'ashley', 'football',\n  'jesus', 'michael', 'ninja', 'mustang', 'password1', 'admin',\n  'password123', '12345678', 'qwerty123', 'password!', 'welcome123',\n  'password2024', '123qwe', 'qwertyuiop', 'zxcvbnm', 'asdfghjkl',\n  'passw0rd', 'p@ssword', 'secret', 'login', 'root', 'toor',\n  'guest', 'user', 'test', 'demo', 'temp', 'changeme', 'default'\n];\n\nconst DICTIONARY_WORDS = [\n  'love', 'hate', 'life', 'death', 'fire', 'water', 'earth', 'wind',\n  'happy', 'sad', 'angry', 'peace', 'war', 'light', 'dark', 'good',\n  'evil', 'fast', 'slow', 'big', 'small', 'hot', 'cold', 'sweet',\n  'bitter', 'strong', 'weak', 'rich', 'poor', 'young', 'old'\n];\n\nexport class PasswordService {\n  analyzePassword(password: string): PasswordAnalysis {\n    const criteria = this.checkCriteria(password);\n    const entropy = this.calculateEntropy(password);\n    const score = this.calculateScore(password, criteria, entropy);\n    const strength = this.getStrengthLevel(score);\n    const suggestions = this.generateSuggestions(password, criteria);\n    const crackTime = this.estimateCrackTime(entropy);\n\n    return {\n      score,\n      strength,\n      criteria,\n      entropy,\n      suggestions,\n      crackTime\n    };\n  }\n\n  private checkCriteria(password: string) {\n    return {\n      length: password.length >= 8,\n      specialChars: /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n      numbers: /\\d/.test(password),\n      upperCase: /[A-Z]/.test(password),\n      lowerCase: /[a-z]/.test(password),\n      noDictionaryWords: !this.containsDictionaryWords(password.toLowerCase())\n    };\n  }\n\n  private containsDictionaryWords(password: string): boolean {\n    const lowerPassword = password.toLowerCase();\n    return COMMON_PASSWORDS.some(common => lowerPassword.includes(common)) ||\n           DICTIONARY_WORDS.some(word => lowerPassword.includes(word));\n  }\n\n  private calculateEntropy(password: string): number {\n    let charsetSize = 0;\n    \n    if (/[a-z]/.test(password)) charsetSize += 26;\n    if (/[A-Z]/.test(password)) charsetSize += 26;\n    if (/\\d/.test(password)) charsetSize += 10;\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) charsetSize += 32;\n\n    return Math.log2(Math.pow(charsetSize, password.length));\n  }\n\n  private calculateScore(password: string, criteria: any, entropy: number): number {\n    let score = 0;\n\n    // Length scoring\n    if (password.length >= 12) score += 25;\n    else if (password.length >= 8) score += 15;\n    else if (password.length >= 6) score += 10;\n\n    // Character variety scoring\n    if (criteria.upperCase) score += 10;\n    if (criteria.lowerCase) score += 10;\n    if (criteria.numbers) score += 10;\n    if (criteria.specialChars) score += 15;\n\n    // Dictionary words penalty\n    if (!criteria.noDictionaryWords) score -= 20;\n\n    // Entropy bonus\n    if (entropy >= 60) score += 20;\n    else if (entropy >= 50) score += 15;\n    else if (entropy >= 40) score += 10;\n\n    // Repetition penalty\n    if (this.hasRepeatingPatterns(password)) score -= 10;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  private hasRepeatingPatterns(password: string): boolean {\n    // Check for repeated characters (3 or more)\n    const repeatedChars = /(.)\\1{2,}/.test(password);\n    \n    // Check for sequential patterns (numbers and letters)\n    const sequential = /(012|123|234|345|456|567|678|789|890|901|abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz|zyx|yxw|xwv|wvu|vut|uts|tsr|srq|rqp|qpo|pon|onm|nml|mlk|lkj|kji|jih|ihg|hgf|gfe|fed|edc|dcb|cba)/i.test(password);\n    \n    // Check for keyboard patterns\n    const keyboardPatterns = /(qwer|wert|erty|rtyu|tyui|yuio|uiop|asdf|sdfg|dfgh|fghj|ghjk|hjkl|zxcv|xcvb|cvbn|vbnm|qaz|wsx|edc|rfv|tgb|yhn|ujm|1qaz|2wsx|3edc|4rfv|5tgb|6yhn|7ujm|8ik|9ol|0p)/i.test(password);\n    \n    // Check for alternating patterns\n    const alternating = /^(.)(.)\\1\\2/.test(password) || /^(.)(.)(.)\\1\\2\\3/.test(password);\n    \n    return repeatedChars || sequential || keyboardPatterns || alternating;\n  }\n\n  private getStrengthLevel(score: number): PasswordAnalysis['strength'] {\n    if (score >= 80) return 'very-strong';\n    if (score >= 60) return 'strong';\n    if (score >= 40) return 'medium';\n    if (score >= 20) return 'weak';\n    return 'very-weak';\n  }\n\n  private generateSuggestions(password: string, criteria: any): string[] {\n    const suggestions: string[] = [];\n\n    if (!criteria.length) {\n      suggestions.push('Use at least 8 characters (12+ recommended)');\n    }\n    if (!criteria.upperCase) {\n      suggestions.push('Add uppercase letters (A-Z)');\n    }\n    if (!criteria.lowerCase) {\n      suggestions.push('Add lowercase letters (a-z)');\n    }\n    if (!criteria.numbers) {\n      suggestions.push('Include numbers (0-9)');\n    }\n    if (!criteria.specialChars) {\n      suggestions.push('Add special characters (!@#$%^&*)');\n    }\n    if (!criteria.noDictionaryWords) {\n      suggestions.push('Avoid common words and phrases');\n    }\n    if (password.length < 12) {\n      suggestions.push('Consider using a longer passphrase');\n    }\n    if (this.hasRepeatingPatterns(password)) {\n      suggestions.push('Avoid repetitive patterns and sequences');\n    }\n\n    return suggestions;\n  }\n\n  private estimateCrackTime(entropy: number): string {\n    const attempts = Math.pow(2, entropy) / 2; // Average case\n    \n    // Modern attack scenarios\n    const scenarios = {\n      basic: 1e3,        // Basic online attack\n      moderate: 1e6,     // Offline attack with consumer hardware\n      advanced: 1e12,    // Dedicated cracking rig\n      quantum: 1e15      // Future quantum computing threat\n    };\n    \n    const scenario = scenarios.advanced; // Use realistic threat model\n    const seconds = attempts / scenario;\n\n    if (seconds < 1) return 'Instantly';\n    if (seconds < 60) return `${Math.ceil(seconds)} seconds`;\n    if (seconds < 3600) return `${Math.ceil(seconds / 60)} minutes`;\n    if (seconds < 86400) return `${Math.ceil(seconds / 3600)} hours`;\n    if (seconds < 2592000) return `${Math.ceil(seconds / 86400)} days`;\n    if (seconds < 31536000) return `${Math.ceil(seconds / 2592000)} months`;\n    if (seconds < 3153600000) return `${Math.ceil(seconds / 31536000)} years`;\n    \n    return 'Centuries';\n  }\n}\n","size_bytes":6834},"server/services/phishing-service.ts":{"content":"import { URL } from 'url';\n\nexport interface PhishingAnalysis {\n  score: number;\n  risk: 'low' | 'medium' | 'high' | 'critical';\n  indicators: {\n    ipBasedUrl: boolean;\n    suspiciousSubdomains: boolean;\n    shortUrl: boolean;\n    suspiciousKeywords: boolean;\n    missingHttps: boolean;\n    domainAge: 'new' | 'medium' | 'established' | 'unknown';\n  };\n  details: string[];\n  recommendations: string[];\n}\n\nconst SUSPICIOUS_KEYWORDS = [\n  'paypal', 'amazon', 'netflix', 'microsoft', 'google', 'apple', 'facebook',\n  'secure', 'verify', 'update', 'suspended', 'confirm', 'urgent', 'click',\n  'winner', 'congratulations', 'prize', 'offer', 'limited', 'act-now',\n  'banking', 'account', 'login', 'signin', 'verification', 'auth', 'security',\n  'alert', 'warning', 'notice', 'expired', 'renewal', 'billing', 'payment',\n  'refund', 'claim', 'validate', 'activate', 'unlock', 'restore', 'recover',\n  'support', 'service', 'helpdesk', 'customer', 'team', 'department',\n  'cryptocurrency', 'bitcoin', 'ethereum', 'wallet', 'trading', 'investment'\n];\n\nconst SHORT_URL_DOMAINS = [\n  'bit.ly', 'tinyurl.com', 't.co', 'goo.gl', 'ow.ly', 'is.gd', \n  'buff.ly', 's.id', 'v.gd', 'x.co', 'short.link'\n];\n\nconst LEGITIMATE_DOMAINS = [\n  'google.com', 'youtube.com', 'facebook.com', 'amazon.com', 'microsoft.com',\n  'apple.com', 'twitter.com', 'instagram.com', 'linkedin.com', 'github.com',\n  'stackoverflow.com', 'reddit.com', 'wikipedia.org', 'paypal.com', 'ebay.com'\n];\n\nexport class PhishingService {\n  analyzeUrl(urlString: string): PhishingAnalysis {\n    try {\n      const url = new URL(urlString);\n      const indicators = this.checkIndicators(url);\n      const score = this.calculateRiskScore(indicators, url);\n      const risk = this.getRiskLevel(score);\n      const details = this.generateDetails(indicators, url);\n      const recommendations = this.generateRecommendations(indicators, risk);\n\n      return {\n        score,\n        risk,\n        indicators,\n        details,\n        recommendations\n      };\n    } catch (error) {\n      return {\n        score: 100,\n        risk: 'critical',\n        indicators: {\n          ipBasedUrl: false,\n          suspiciousSubdomains: false,\n          shortUrl: false,\n          suspiciousKeywords: false,\n          missingHttps: true,\n          domainAge: 'unknown'\n        },\n        details: ['Invalid URL format'],\n        recommendations: ['Verify the URL format and try again']\n      };\n    }\n  }\n\n  private checkIndicators(url: URL) {\n    return {\n      ipBasedUrl: this.isIpBasedUrl(url.hostname),\n      suspiciousSubdomains: this.hasSuspiciousSubdomains(url.hostname),\n      shortUrl: this.isShortUrl(url.hostname),\n      suspiciousKeywords: this.containsSuspiciousKeywords(url.href),\n      missingHttps: url.protocol !== 'https:',\n      domainAge: this.estimateDomainAge(url.hostname)\n    };\n  }\n\n  private isIpBasedUrl(hostname: string): boolean {\n    const ipv4Regex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n    const ipv6Regex = /^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n    return ipv4Regex.test(hostname) || ipv6Regex.test(hostname);\n  }\n\n  private hasSuspiciousSubdomains(hostname: string): boolean {\n    const parts = hostname.split('.');\n    \n    // More than 3 subdomains is suspicious\n    if (parts.length > 4) return true;\n    \n    // Check for suspicious patterns\n    const suspiciousPatterns = [\n      /\\d{4,}/, // Long numbers\n      /[a-z]{15,}/, // Very long random strings\n      /-{2,}/, // Multiple hyphens\n      /secure.*secure/, // Repeated \"secure\"\n      /verify.*verify/, // Repeated \"verify\"\n    ];\n    \n    return parts.some(part => \n      suspiciousPatterns.some(pattern => pattern.test(part))\n    );\n  }\n\n  private isShortUrl(hostname: string): boolean {\n    return SHORT_URL_DOMAINS.includes(hostname.toLowerCase());\n  }\n\n  private containsSuspiciousKeywords(url: string): boolean {\n    const lowerUrl = url.toLowerCase();\n    return SUSPICIOUS_KEYWORDS.some(keyword => lowerUrl.includes(keyword));\n  }\n\n  private estimateDomainAge(hostname: string): PhishingAnalysis['indicators']['domainAge'] {\n    // Simplified domain age estimation based on known domains\n    if (LEGITIMATE_DOMAINS.includes(hostname.toLowerCase())) {\n      return 'established';\n    }\n    \n    // Very simple heuristic - in real implementation, you'd query WHOIS data\n    const tld = hostname.split('.').pop()?.toLowerCase();\n    if (tld === 'tk' || tld === 'ml' || tld === 'ga' || tld === 'cf') {\n      return 'new'; // Free TLDs often used by malicious sites\n    }\n    \n    return 'unknown';\n  }\n\n  private calculateRiskScore(indicators: PhishingAnalysis['indicators'], url: URL): number {\n    let score = 0;\n\n    if (indicators.ipBasedUrl) score += 30;\n    if (indicators.suspiciousSubdomains) score += 25;\n    if (indicators.shortUrl) score += 20;\n    if (indicators.suspiciousKeywords) score += 20;\n    if (indicators.missingHttps) score += 15;\n    \n    switch (indicators.domainAge) {\n      case 'new': score += 25; break;\n      case 'medium': score += 10; break;\n      case 'established': score -= 20; break;\n    }\n\n    // Additional checks\n    if (this.hasHomographAttack(url.hostname)) score += 30;\n    if (this.hasExcessiveRedirects(url.href)) score += 15;\n    if (this.hasSuspiciousPort(url.port)) score += 20;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  private hasHomographAttack(hostname: string): boolean {\n    // Check for mixed scripts or confusing characters\n    const cyrillicPattern = /[а-я]/i; // Cyrillic letters\n    const greekPattern = /[α-ω]/i; // Greek letters  \n    const fullwidthPattern = /[ａ-ｚ]/i; // Fullwidth Latin\n    \n    // Check for confusing character combinations in domain\n    const confusingChars = /[0oOQ1lI5sS2zZ6G9gq]/;\n    const hasConfusing = confusingChars.test(hostname) && hostname.length > 3;\n    \n    // Check for IDN (Internationalized Domain Name) encoding\n    const idnPattern = /xn--/;\n    \n    // Look for suspicious Unicode substitutions\n    const suspiciousUnicode = cyrillicPattern.test(hostname) || \n                             greekPattern.test(hostname) || \n                             fullwidthPattern.test(hostname);\n    \n    return suspiciousUnicode || (hasConfusing && idnPattern.test(hostname));\n  }\n\n  private hasExcessiveRedirects(url: string): boolean {\n    // Simple check for multiple redirects in URL\n    return (url.match(/http/g) || []).length > 1;\n  }\n\n  private hasSuspiciousPort(port: string): boolean {\n    if (!port) return false;\n    const portNum = parseInt(port);\n    // Common non-standard ports that could indicate suspicious activity\n    const suspiciousPorts = [8080, 8000, 3000, 5000, 9000, 8443, 8888, 9999, 4444, 31337, 1337, 8008];\n    // Very high ports that might be used to avoid detection\n    const highPort = portNum > 49152;\n    return suspiciousPorts.includes(portNum) || highPort;\n  }\n\n  private getRiskLevel(score: number): PhishingAnalysis['risk'] {\n    if (score >= 70) return 'critical';\n    if (score >= 50) return 'high';\n    if (score >= 30) return 'medium';\n    return 'low';\n  }\n\n  private generateDetails(indicators: PhishingAnalysis['indicators'], url: URL): string[] {\n    const details: string[] = [];\n\n    if (indicators.ipBasedUrl) {\n      details.push('URL uses IP address instead of domain name');\n    }\n    if (indicators.suspiciousSubdomains) {\n      details.push('Domain has suspicious subdomain patterns');\n    }\n    if (indicators.shortUrl) {\n      details.push('URL uses a URL shortening service');\n    }\n    if (indicators.suspiciousKeywords) {\n      details.push('URL contains suspicious keywords often used in phishing');\n    }\n    if (indicators.missingHttps) {\n      details.push('Connection is not encrypted (HTTP instead of HTTPS)');\n    }\n    \n    switch (indicators.domainAge) {\n      case 'new':\n        details.push('Domain appears to be newly registered');\n        break;\n      case 'established':\n        details.push('Domain has an established online presence');\n        break;\n      case 'unknown':\n        details.push('Unable to determine domain age');\n        break;\n    }\n\n    if (details.length === 0) {\n      details.push('No obvious phishing indicators detected');\n    }\n\n    return details;\n  }\n\n  private generateRecommendations(indicators: PhishingAnalysis['indicators'], risk: PhishingAnalysis['risk']): string[] {\n    const recommendations: string[] = [];\n\n    if (risk === 'critical' || risk === 'high') {\n      recommendations.push('DO NOT enter personal information on this site');\n      recommendations.push('Verify the legitimate website URL directly');\n      recommendations.push('Report this URL to your security team');\n    }\n\n    if (indicators.missingHttps) {\n      recommendations.push('Look for HTTPS encryption before entering sensitive data');\n    }\n\n    if (indicators.shortUrl) {\n      recommendations.push('Expand shortened URLs to see the actual destination');\n    }\n\n    if (indicators.suspiciousKeywords) {\n      recommendations.push('Be cautious of urgent language and requests for immediate action');\n    }\n\n    if (risk === 'low') {\n      recommendations.push('Always verify URLs match the official website');\n      recommendations.push('Keep your browser and security software updated');\n    }\n\n    return recommendations;\n  }\n}\n","size_bytes":9260},"server/services/port-service.ts":{"content":"import { createConnection, Socket } from 'net';\n\nexport interface PortScanResult {\n  target: string;\n  totalPorts: number;\n  openPorts: OpenPort[];\n  scanDuration: number;\n  timestamp: Date;\n}\n\nexport interface OpenPort {\n  port: number;\n  state: 'open' | 'closed' | 'filtered';\n  service: string;\n  version?: string;\n  banner?: string;\n}\n\nconst COMMON_SERVICES: { [key: number]: string } = {\n  21: 'FTP',\n  22: 'SSH',\n  23: 'Telnet',\n  25: 'SMTP',\n  53: 'DNS',\n  80: 'HTTP',\n  110: 'POP3',\n  135: 'RPC Endpoint Mapper',\n  139: 'NetBIOS',\n  143: 'IMAP',\n  161: 'SNMP',\n  389: 'LDAP',\n  443: 'HTTPS',\n  445: 'SMB',\n  993: 'IMAPS',\n  995: 'POP3S',\n  1433: 'MSSQL',\n  1521: 'Oracle',\n  2049: 'NFS',\n  3306: 'MySQL',\n  3389: 'RDP',\n  5432: 'PostgreSQL',\n  5800: 'VNC HTTP',\n  5900: 'VNC',\n  6379: 'Redis',\n  8080: 'HTTP-Alt',\n  8443: 'HTTPS-Alt',\n  9200: 'Elasticsearch',\n  11211: 'Memcached',\n  27017: 'MongoDB',\n  50070: 'Hadoop'\n};\n\nexport class PortService {\n  async scanPorts(target: string, portRange: string = '1-1000'): Promise<PortScanResult> {\n    const startTime = Date.now();\n    const ports = this.parsePortRange(portRange);\n    const openPorts: OpenPort[] = [];\n\n    // Validate target\n    if (!this.isValidTarget(target)) {\n      throw new Error('Invalid target address');\n    }\n\n    // Security check for localhost/private ranges\n    if (this.isPrivateOrLocalhost(target)) {\n      console.warn(`Scanning private/localhost target: ${target}`);\n    }\n\n    // Adaptive concurrency based on port count\n    const concurrencyLimit = Math.min(50, Math.max(10, Math.floor(ports.length / 10)));\n    const chunks = this.chunkArray(ports, concurrencyLimit);\n\n    for (const chunk of chunks) {\n      const promises = chunk.map(port => this.scanPort(target, port));\n      const results = await Promise.allSettled(promises);\n      \n      results.forEach((result, index) => {\n        if (result.status === 'fulfilled' && result.value) {\n          openPorts.push(result.value);\n        }\n      });\n      \n      // Add small delay between chunks to be respectful\n      if (chunks.indexOf(chunk) < chunks.length - 1) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    // Enhanced analysis of open ports\n    this.analyzePortSecurity(openPorts);\n\n    const scanDuration = Date.now() - startTime;\n\n    return {\n      target,\n      totalPorts: ports.length,\n      openPorts: openPorts.sort((a, b) => a.port - b.port),\n      scanDuration,\n      timestamp: new Date()\n    };\n  }\n\n  private parsePortRange(portRange: string): number[] {\n    const ports: number[] = [];\n    \n    if (portRange.includes(',')) {\n      // Handle comma-separated ports: \"80,443,8080\"\n      const portList = portRange.split(',');\n      for (const port of portList) {\n        const portNum = parseInt(port.trim());\n        if (portNum >= 1 && portNum <= 65535) {\n          ports.push(portNum);\n        }\n      }\n    } else if (portRange.includes('-')) {\n      // Handle port ranges: \"1-1000\"\n      const [start, end] = portRange.split('-');\n      const startPort = parseInt(start.trim());\n      const endPort = parseInt(end.trim());\n      \n      if (startPort >= 1 && endPort <= 65535 && startPort <= endPort) {\n        for (let port = startPort; port <= endPort; port++) {\n          ports.push(port);\n        }\n      }\n    } else {\n      // Single port\n      const portNum = parseInt(portRange.trim());\n      if (portNum >= 1 && portNum <= 65535) {\n        ports.push(portNum);\n      }\n    }\n\n    return ports;\n  }\n\n  private isValidTarget(target: string): boolean {\n    // Basic validation for IP addresses and hostnames\n    const ipv4Regex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n    const hostnameRegex = /^[a-zA-Z0-9.-]+$/;\n    \n    return ipv4Regex.test(target) || hostnameRegex.test(target);\n  }\n\n  private chunkArray<T>(array: T[], size: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  }\n\n  private async scanPort(target: string, port: number): Promise<OpenPort | null> {\n    return new Promise((resolve) => {\n      const socket = new Socket();\n      const timeout = 2000; // 2 second timeout\n\n      socket.setTimeout(timeout);\n\n      socket.on('connect', async () => {\n        socket.destroy();\n        \n        // Try to get banner information\n        const banner = await this.getBanner(target, port);\n        \n        resolve({\n          port,\n          state: 'open',\n          service: COMMON_SERVICES[port] || 'Unknown',\n          banner\n        });\n      });\n\n      socket.on('timeout', () => {\n        socket.destroy();\n        resolve(null);\n      });\n\n      socket.on('error', () => {\n        socket.destroy();\n        resolve(null);\n      });\n\n      socket.connect(port, target);\n    });\n  }\n\n  private async getBanner(target: string, port: number): Promise<string | undefined> {\n    return new Promise((resolve) => {\n      const socket = new Socket();\n      let banner = '';\n\n      socket.setTimeout(3000);\n\n      socket.on('connect', () => {\n        // Send appropriate probe based on service\n        const probe = this.getServiceProbe(port);\n        if (probe) {\n          socket.write(probe);\n        }\n      });\n\n      socket.on('data', (data) => {\n        banner += data.toString().trim();\n        socket.destroy();\n        resolve(banner || undefined);\n      });\n\n      socket.on('timeout', () => {\n        socket.destroy();\n        resolve(banner || undefined);\n      });\n\n      socket.on('error', () => {\n        socket.destroy();\n        resolve(undefined);\n      });\n\n      socket.connect(port, target);\n    });\n  }\n\n  private getServiceProbe(port: number): string | null {\n    switch (port) {\n      case 21: // FTP\n        return 'HELP\\r\\n';\n      case 22: // SSH\n        return 'SSH-2.0-Scanner\\r\\n';\n      case 25: // SMTP\n        return 'EHLO scanner\\r\\n';\n      case 80: // HTTP\n      case 8080:\n        return 'GET / HTTP/1.0\\r\\n\\r\\n';\n      case 443: // HTTPS\n      case 8443:\n        return 'GET / HTTP/1.0\\r\\n\\r\\n';\n      case 110: // POP3\n        return 'USER scanner\\r\\n';\n      case 143: // IMAP\n        return 'A001 CAPABILITY\\r\\n';\n      default:\n        return null;\n    }\n  }\n\n  getCommonPorts(): number[] {\n    return [21, 22, 23, 25, 53, 80, 110, 135, 139, 143, 161, 389, 443, 445, 993, 995, 1433, 1521, 2049, 3306, 3389, 5432, 5800, 5900, 6379, 8080, 8443, 9200, 11211, 27017, 50070];\n  }\n\n  private isPrivateOrLocalhost(target: string): boolean {\n    const ipv4Regex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n    if (ipv4Regex.test(target)) {\n      const parts = target.split('.').map(Number);\n      // Check for private IP ranges\n      return (parts[0] === 10) ||\n             (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) ||\n             (parts[0] === 192 && parts[1] === 168) ||\n             (parts[0] === 127) || // Localhost\n             (parts[0] === 169 && parts[1] === 254); // Link-local\n    }\n    return target === 'localhost' || target.endsWith('.local');\n  }\n\n  private analyzePortSecurity(openPorts: OpenPort[]): void {\n    openPorts.forEach(port => {\n      // Mark potentially dangerous services\n      const dangerousPorts = [21, 23, 135, 139, 445, 1433, 3306, 3389, 5432, 5900];\n      if (dangerousPorts.includes(port.port)) {\n        port.version = (port.version || '') + ' [HIGH RISK]';\n      }\n      \n      // Add security notes for specific services\n      if (port.port === 22 && port.banner?.includes('SSH-1')) {\n        port.version = (port.version || '') + ' [VULNERABLE SSH VERSION]';\n      }\n      if (port.port === 21 && port.banner?.toLowerCase().includes('anonymous')) {\n        port.version = (port.version || '') + ' [ANONYMOUS FTP]';\n      }\n    });\n  }\n\n  async quickScan(target: string): Promise<PortScanResult> {\n    const commonPorts = this.getCommonPorts();\n    return this.scanPorts(target, commonPorts.join(','));\n  }\n}\n","size_bytes":7928},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  name: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/logout', {});\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear all queries after logout\n      queryClient.clear();\n    },\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    isGuest: !user && !isLoading,\n    logout,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}","size_bytes":960},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      // Clone the response to avoid \"body stream already read\" error\n      const clonedResponse = res.clone();\n      const jsonResponse = await clonedResponse.json();\n      // Extract just the message if it's a JSON response\n      const errorMessage = jsonResponse.message || jsonResponse.error || 'Something went wrong';\n      throw new Error(errorMessage);\n    } catch (jsonError) {\n      // If not JSON, use the text response from original response\n      try {\n        const text = await res.text();\n        throw new Error(text || res.statusText);\n      } catch (textError) {\n        // Fallback to status text if everything fails\n        throw new Error(res.statusText || 'Something went wrong');\n      }\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2008},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { \n  Key, \n  Fish, \n  Network, \n  Keyboard, \n  FilePen, \n  Shield, \n  AlertTriangle,\n  ArrowRight\n} from 'lucide-react';\n\n\nexport default function Dashboard() {\n\n  const securityTools = [\n    {\n      title: 'Password Analyzer',\n      description: 'Check password strength and security criteria',\n      icon: Key,\n      path: '/password-analyzer',\n      color: 'text-primary',\n      bgColor: 'bg-primary/10'\n    },\n    {\n      title: 'Phishing Detector', \n      description: 'Analyze URLs for malicious patterns',\n      icon: Fish,\n      path: '/phishing-detector',\n      color: 'text-destructive',\n      bgColor: 'bg-destructive/10'\n    },\n    {\n      title: 'Port Scanner',\n      description: 'Scan network ports and services',\n      icon: Network, \n      path: '/port-scanner',\n      color: 'text-chart-3',\n      bgColor: 'bg-chart-3/10'\n    },\n    {\n      title: 'Keylogger Detector',\n      description: 'Monitor for suspicious processes',\n      icon: Keyboard,\n      path: '/keylogger-detector', \n      color: 'text-chart-4',\n      bgColor: 'bg-chart-4/10'\n    },\n    {\n      title: 'File Integrity Monitor',\n      description: 'Track file system changes',\n      icon: FilePen,\n      path: '/file-integrity',\n      color: 'text-chart-5', \n      bgColor: 'bg-chart-5/10'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          Cybersecurity Toolkit\n        </h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Comprehensive cybersecurity toolkit for threat detection and system analysis\n        </p>\n      </div>\n\n      {/* System Status */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">System Status</p>\n              <p className=\"text-3xl font-bold text-accent\">Ready</p>\n            </div>\n            <Shield className=\"h-8 w-8 text-accent\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Tools Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Security Analysis Tools</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3 sm:gap-4\">\n            {securityTools.map((tool) => {\n              const Icon = tool.icon;\n              return (\n                <Link key={tool.path} href={tool.path}>\n                  <div className=\"p-3 sm:p-4 border border-border rounded-lg hover:bg-secondary/50 transition-colors cursor-pointer group\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className={`w-10 h-10 sm:w-12 sm:h-12 rounded-lg flex items-center justify-center ${tool.bgColor}`}>\n                        <Icon className={`h-5 w-5 sm:h-6 sm:w-6 ${tool.color}`} />\n                      </div>\n                      <ArrowRight className=\"h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n                    </div>\n                    <h3 className=\"text-sm sm:text-base font-semibold mb-1\">{tool.title}</h3>\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">{tool.description}</p>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n\n      {/* Security Tips */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <span>Security Best Practices</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Regular Security Checks:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Run password analysis on critical accounts</li>\n                <li>• Scan network ports weekly</li>\n                <li>• Monitor file integrity on sensitive directories</li>\n                <li>• Check for keyloggers regularly</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Threat Prevention:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Verify all URLs before clicking</li>\n                <li>• Use strong, unique passwords</li>\n                <li>• Keep systems and software updated</li>\n                <li>• Enable two-factor authentication</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4894},"client/src/pages/file-integrity-page.tsx":{"content":"import { FileIntegrityMonitor } from \"@/components/security/file-integrity-monitor\";\n\nexport default function FileIntegrityPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">File Integrity Monitoring</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Monitor critical files and directories for unauthorized changes, detect tampering, and maintain system integrity against malware modifications.\n        </p>\n      </div>\n      \n      <FileIntegrityMonitor />\n      \n      <div className=\"bg-muted/50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">File System Security</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Critical Areas to Monitor:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• System configuration files</li>\n              <li>• Application executables</li>\n              <li>• User data directories</li>\n              <li>• Log files and databases</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-2\">Best Practices:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Establish trusted baselines</li>\n              <li>• Regular integrity checks</li>\n              <li>• Automated alert systems</li>\n              <li>• Secure backup strategies</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1579},"client/src/pages/history-page.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar, Filter, Search, Download, Eye, BarChart3 } from 'lucide-react';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface ScanResult {\n  id: string;\n  type: string;\n  target: string;\n  result: string;\n  score: number | null;\n  timestamp: string;\n}\n\nexport default function HistoryPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n\n  const { data: scanResults = [], isLoading } = useQuery<ScanResult[]>({\n    queryKey: ['/api/security/scan-history'],\n  });\n\n  const filteredResults = scanResults.filter((result: ScanResult) => {\n    const matchesSearch = !searchTerm || \n      result.target.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      result.type.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === 'all' || result.type === filterType;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const getTypeColor = (type: string) => {\n    const colors = {\n      'password': 'bg-primary/10 text-primary',\n      'phishing': 'bg-destructive/10 text-destructive',\n      'port': 'bg-chart-3/10 text-chart-3',\n      'keylogger': 'bg-chart-4/10 text-chart-4',\n      'file_integrity': 'bg-chart-5/10 text-chart-5'\n    };\n    return colors[type as keyof typeof colors] || 'bg-muted/10 text-muted-foreground';\n  };\n\n  const getTypeIcon = (type: string) => {\n    const icons = {\n      'password': '🔑',\n      'phishing': '🎣', \n      'port': '🌐',\n      'keylogger': '⌨️',\n      'file_integrity': '📝'\n    };\n    return icons[type as keyof typeof icons] || '🔍';\n  };\n\n  const formatDateTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  const getResultSummary = (result: string, type: string) => {\n    try {\n      const parsed = JSON.parse(result);\n      switch (type) {\n        case 'password':\n          return `Strength: ${parsed.strength || 'Unknown'}`;\n        case 'phishing':\n          return `Risk: ${parsed.risk || 'Unknown'}`;\n        case 'port':\n          return `${parsed.openPorts?.length || 0} open ports`;\n        case 'keylogger':\n          return `${parsed.suspiciousProcesses?.length || 0} suspicious processes`;\n        case 'file_integrity':\n          return `${parsed.changes?.length || 0} file changes`;\n        default:\n          return 'Scan completed';\n      }\n    } catch {\n      return 'Scan completed';\n    }\n  };\n\n  const exportHistory = () => {\n    const dataStr = JSON.stringify(filteredResults, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    const exportFileDefaultName = `cybersec-history-${new Date().toISOString().split('T')[0]}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const scanTypeStats = scanResults.reduce((acc: Record<string, number>, result) => {\n    acc[result.type] = (acc[result.type] || 0) + 1;\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Scan History</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            View and analyze all security scan results with detailed filtering and export options.\n          </p>\n        </div>\n        <Button onClick={exportHistory} className=\"flex items-center space-x-2\" data-testid=\"button-export-history\">\n          <Download className=\"h-4 w-4\" />\n          <span>Export History</span>\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Scans</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-scans\">{scanResults.length}</p>\n              </div>\n              <BarChart3 className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        {Object.entries(scanTypeStats).map(([type, count]) => (\n          <Card key={type}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground capitalize\">\n                    {type.replace('_', ' ')}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{count}</p>\n                </div>\n                <span className=\"text-2xl\">{getTypeIcon(type)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"h-5 w-5\" />\n            <span>Filter & Search</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search by target or scan type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search-history\"\n                />\n              </div>\n            </div>\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-filter-type\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"password\">Password Analysis</SelectItem>\n                <SelectItem value=\"phishing\">Phishing Detection</SelectItem>\n                <SelectItem value=\"port\">Port Scanning</SelectItem>\n                <SelectItem value=\"keylogger\">Keylogger Detection</SelectItem>\n                <SelectItem value=\"file_integrity\">File Integrity</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Scan Results ({filteredResults.length})</span>\n            <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                <span className=\"ml-2\">Loading scan history...</span>\n              </div>\n            ) : filteredResults.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <Eye className=\"h-12 w-12 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No scan results found</h3>\n                <p>Try adjusting your search terms or filters, or run some security scans first.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredResults.map((result) => (\n                  <div\n                    key={result.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-secondary/50 transition-colors\"\n                    data-testid={`scan-result-${result.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-2xl\">{getTypeIcon(result.type)}</div>\n                      <div>\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <Badge className={getTypeColor(result.type)}>\n                            {result.type.replace('_', ' ')}\n                          </Badge>\n                          <span className=\"font-medium\">{result.target}</span>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {getResultSummary(result.result, result.type)}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatDateTime(result.timestamp)}\n                      </div>\n                      {result.score !== null && (\n                        <div className=\"text-sm font-medium mt-1\">\n                          Score: {result.score}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9789},"client/src/pages/keylogger-detector-page.tsx":{"content":"import { KeyloggerDetector } from \"@/components/security/keylogger-detector\";\n\nexport default function KeyloggerDetectorPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Keylogger Detection System</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Monitor system processes for suspicious keylogging activity and detect malicious software that may be capturing sensitive information.\n        </p>\n      </div>\n      \n      <KeyloggerDetector />\n      \n      <div className=\"bg-muted/50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Endpoint Protection Tips</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Signs of Keylogger Activity:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Unusual system slowdowns</li>\n              <li>• Unknown processes consuming resources</li>\n              <li>• Suspicious network activity</li>\n              <li>• Random system crashes or freezes</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-2\">Prevention Strategies:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Regular antivirus scans</li>\n              <li>• Keep operating system updated</li>\n              <li>• Use virtual keyboards for sensitive data</li>\n              <li>• Monitor running processes regularly</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1634},"client/src/pages/login-page.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Shield, Key, Network, Fish, Keyboard, FilePen, Eye, EyeOff, Lock, Mail, ArrowRight, CheckCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nconst securityFeatures = [\n  {\n    icon: Key,\n    title: \"Password Analysis\",\n    description: \"Advanced strength testing with entropy calculation and crack time estimation\"\n  },\n  {\n    icon: Fish,\n    title: \"Phishing Detection\", \n    description: \"Real-time URL analysis with machine learning threat detection\"\n  },\n  {\n    icon: Network,\n    title: \"Network Scanning\",\n    description: \"Comprehensive port scanning with service fingerprinting\"\n  },\n  {\n    icon: Keyboard,\n    title: \"Malware Detection\",\n    description: \"System process monitoring and suspicious activity alerts\"\n  },\n  {\n    icon: FilePen,\n    title: \"File Integrity\",\n    description: \"Baseline monitoring with cryptographic hash verification\"\n  },\n  {\n    icon: Shield,\n    title: \"Security Reports\",\n    description: \"Detailed analytics with exportable compliance documentation\"\n  }\n];\n\nexport default function LoginPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        email: data.email,\n        password: data.password,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful!\",\n        description: `Welcome back, ${data.user.name}!`,\n      });\n      // Invalidate user query to refresh auth state\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      // Redirect to dashboard\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4 py-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"text-center space-y-2\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"text-primary-foreground text-2xl\" />\n            </div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold\">Welcome back</h1>\n            <p className=\"text-muted-foreground\">Sign in to your CyberSec account</p>\n          </div>\n\n          {/* Login Form */}\n          <Card className=\"border border-border\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-xl text-center\">Sign In</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Enter your email\"\n                              className=\"pl-10\"\n                              data-testid=\"input-email\"\n                              {...field}\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Enter your password\"\n                              className=\"pl-10 pr-10\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              data-testid=\"button-toggle-password\"\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input type=\"checkbox\" id=\"remember\" className=\"w-4 h-4\" />\n                      <label htmlFor=\"remember\" className=\"text-muted-foreground cursor-pointer\">\n                        Remember me\n                      </label>\n                    </div>\n                    <Link href=\"/forgot-password\" className=\"text-primary hover:underline\">\n                      Forgot password?\n                    </Link>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-signin\"\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </form>\n              </Form>\n\n              <div className=\"mt-6 text-center text-sm\">\n                <span className=\"text-muted-foreground\">Don't have an account? </span>\n                <Link href=\"/signup\" className=\"text-primary hover:underline font-medium\">\n                  Create account\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8211},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/password-analyzer-page.tsx":{"content":"import { PasswordAnalyzer } from \"@/components/security/password-analyzer\";\n\nexport default function PasswordAnalyzerPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Password Strength Analyzer</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Analyze password security, check strength criteria, and get improvement suggestions to prevent brute-force attacks.\n        </p>\n      </div>\n      \n      <PasswordAnalyzer />\n      \n      <div className=\"bg-muted/50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Password Security Tips</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Strong Password Criteria:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• At least 12 characters long</li>\n              <li>• Mix of uppercase and lowercase letters</li>\n              <li>• Include numbers and special characters</li>\n              <li>• Avoid dictionary words and common patterns</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-2\">Security Best Practices:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Use unique passwords for each account</li>\n              <li>• Enable two-factor authentication</li>\n              <li>• Consider using passphrases</li>\n              <li>• Regularly update critical passwords</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1636},"client/src/pages/phishing-detector-page.tsx":{"content":"import { PhishingDetector } from \"@/components/security/phishing-detector\";\n\nexport default function PhishingDetectorPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Phishing URL Detection</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Analyze URLs for common phishing patterns, suspicious domains, and malicious indicators to protect against social engineering attacks.\n        </p>\n      </div>\n      \n      <PhishingDetector />\n      \n      <div className=\"bg-muted/50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Phishing Protection Tips</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Red Flags to Watch For:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• IP addresses instead of domain names</li>\n              <li>• Suspicious subdomains or misspellings</li>\n              <li>• Shortened URLs from unknown sources</li>\n              <li>• Missing HTTPS encryption</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-2\">Stay Safe Online:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Always verify the sender's identity</li>\n              <li>• Type URLs directly instead of clicking links</li>\n              <li>• Check for valid SSL certificates</li>\n              <li>• Report suspicious URLs to authorities</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1649},"client/src/pages/port-scanner-page.tsx":{"content":"import { PortScanner } from \"@/components/security/port-scanner\";\n\nexport default function PortScannerPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Network Port Scanner</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Scan network ports to identify open services, detect potential vulnerabilities, and assess network security posture.\n        </p>\n      </div>\n      \n      <PortScanner />\n      \n      <div className=\"bg-muted/50 p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold mb-3\">Network Security Guidelines</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-2\">Common Vulnerable Ports:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Port 21 (FTP) - Often misconfigured</li>\n              <li>• Port 23 (Telnet) - Unencrypted protocol</li>\n              <li>• Port 1433 (MSSQL) - Database exposure</li>\n              <li>• Port 3389 (RDP) - Remote access risks</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-2\">Security Best Practices:</h4>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Close unnecessary open ports</li>\n              <li>• Use firewalls to restrict access</li>\n              <li>• Regular security audits and scans</li>\n              <li>• Keep services updated and patched</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1614},"client/src/pages/signup-page.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Shield, Key, Network, Fish, Keyboard, FilePen, Eye, EyeOff, Lock, Mail, User, ArrowRight, Star, Zap, TrendingUp } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nconst signupSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\nconst platformBenefits = [\n  {\n    icon: Zap,\n    title: \"Real-time Threat Detection\",\n    description: \"Instant alerts and automated response to security threats with AI-powered analysis\",\n    highlight: \"99.9% Detection Rate\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Advanced Analytics Dashboard\",\n    description: \"Comprehensive security metrics with predictive insights and trend analysis\",\n    highlight: \"Professional Reports\"\n  },\n  {\n    icon: Shield,\n    title: \"Enterprise-Grade Security\",\n    description: \"Bank-level encryption with compliance standards (SOC2, GDPR, HIPAA)\",\n    highlight: \"256-bit Encryption\"\n  },\n  {\n    icon: Network,\n    title: \"Multi-Layer Protection\",\n    description: \"Network, endpoint, and application security in one unified platform\",\n    highlight: \"5 Security Layers\"\n  }\n];\n\nconst securityTools = [\n  { name: \"Password Analyzer\", status: \"included\" },\n  { name: \"Phishing Detector\", status: \"included\" },\n  { name: \"Port Scanner\", status: \"included\" },\n  { name: \"Keylogger Detection\", status: \"included\" },\n  { name: \"File Integrity Monitor\", status: \"included\" },\n  { name: \"Security Reports\", status: \"included\" }\n];\n\nexport default function SignupPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupForm) => {\n      const response = await apiRequest('POST', '/api/auth/signup', {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n        confirmPassword: data.confirmPassword,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Account Created!\",\n        description: `Welcome ${data.user.name}! Your account has been created successfully.`,\n      });\n      // Redirect to dashboard\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupForm) => {\n    signupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4 py-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"text-center space-y-2\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"text-primary-foreground text-2xl\" />\n            </div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold\">Create your account</h1>\n            <p className=\"text-muted-foreground\">Join thousands of security professionals</p>\n          </div>\n\n          {/* Sign Up Form */}\n          <Card className=\"border border-border\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-xl text-center\">Sign Up</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Enter your full name\"\n                              className=\"pl-10\"\n                              data-testid=\"input-name\"\n                              {...field}\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Enter your email\"\n                              className=\"pl-10\"\n                              data-testid=\"input-email\"\n                              {...field}\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Create a password\"\n                              className=\"pl-10 pr-10\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              data-testid=\"button-toggle-password\"\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Confirm Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Confirm your password\"\n                              className=\"pl-10 pr-10\"\n                              data-testid=\"input-confirm-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                              data-testid=\"button-toggle-confirm-password\"\n                            >\n                              {showConfirmPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <input type=\"checkbox\" id=\"terms\" className=\"w-4 h-4\" required />\n                    <label htmlFor=\"terms\" className=\"text-muted-foreground cursor-pointer\">\n                      I agree to the{' '}\n                      <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                        Terms of Service\n                      </Link>\n                      {' '}and{' '}\n                      <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                        Privacy Policy\n                      </Link>\n                    </label>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={signupMutation.isPending}\n                    data-testid=\"button-signup\"\n                  >\n                    {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </form>\n              </Form>\n\n              <div className=\"mt-6 text-center text-sm\">\n                <span className=\"text-muted-foreground\">Already have an account? </span>\n                <Link href=\"/login\" className=\"text-primary hover:underline font-medium\">\n                  Sign in\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11636},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Shield, Menu } from \"lucide-react\";\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n}\n\nexport function Header({ onMenuClick }: HeaderProps) {\n\n  return (\n    <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-30\">\n      <div className=\"px-4 sm:px-6 py-3 sm:py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {/* Mobile menu button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMenuClick}\n              className=\"lg:hidden p-2\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            \n            {/* Header title - responsive */}\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Shield className=\"text-primary-foreground text-base sm:text-lg\" />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-lg sm:text-xl font-bold text-foreground\">CyberSec Toolkit</h1>\n                <p className=\"text-xs sm:text-sm text-muted-foreground\">Comprehensive Security Analysis Suite</p>\n              </div>\n              <div className=\"sm:hidden\">\n                <h1 className=\"text-lg font-bold text-foreground\">CyberSec</h1>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Empty space for future actions */}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1795},"client/src/components/layout/layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const handleMenuClick = () => {\n    console.log('Menu clicked, opening sidebar');\n    setSidebarOpen(true);\n  };\n\n  const handleSidebarClose = () => {\n    console.log('Closing sidebar');\n    setSidebarOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      \n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\" \n          onClick={handleSidebarClose}\n        />\n      )}\n      \n      <div className=\"flex\">\n        <Sidebar \n          isOpen={sidebarOpen} \n          onClose={handleSidebarClose}\n        />\n        <div className=\"flex-1 flex flex-col min-w-0\">\n          <Header onMenuClick={handleMenuClick} />\n          <main className=\"flex-1 p-4 sm:p-6 overflow-x-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1167},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Shield, \n  Key, \n  Fish, \n  Network, \n  Keyboard, \n  FilePen, \n  Home,\n  ChevronLeft,\n  ChevronRight,\n  X\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\n\ninterface SidebarItem {\n  icon: any;\n  label: string;\n  path: string;\n  description: string;\n}\n\nconst sidebarItems: SidebarItem[] = [\n  {\n    icon: Home,\n    label: \"Dashboard\",\n    path: \"/\",\n    description: \"Overview & Quick Actions\"\n  },\n  {\n    icon: Key,\n    label: \"Password Analyzer\",\n    path: \"/password-analyzer\",\n    description: \"Check password strength & security\"\n  },\n  {\n    icon: Fish,\n    label: \"Phishing Detector\",\n    path: \"/phishing-detector\", \n    description: \"Analyze URLs for phishing threats\"\n  },\n  {\n    icon: Network,\n    label: \"Port Scanner\",\n    path: \"/port-scanner\",\n    description: \"Scan network ports & services\"\n  },\n  {\n    icon: Keyboard,\n    label: \"Keylogger Detector\",\n    path: \"/keylogger-detector\",\n    description: \"Monitor for malicious processes\"\n  },\n  {\n    icon: FilePen,\n    label: \"File Integrity Monitor\",\n    path: \"/file-integrity\",\n    description: \"Track file system changes\"\n  }\n];\n\ninterface SidebarProps {\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <>\n      <div className={cn(\n        \"bg-card border-r border-border flex flex-col transition-all duration-300\",\n        // Desktop sidebar\n        \"hidden lg:flex\",\n        collapsed ? \"w-16\" : \"w-64\"\n      )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          {!collapsed && (\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Shield className=\"text-primary-foreground text-lg\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-foreground\">CyberSec</h1>\n                <p className=\"text-xs text-muted-foreground\">Security Toolkit</p>\n              </div>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setCollapsed(!collapsed)}\n            className=\"p-1 h-8 w-8\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {collapsed ? (\n              <ChevronRight className=\"h-4 w-4\" />\n            ) : (\n              <ChevronLeft className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation Items */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {sidebarItems.map((item) => {\n          const isActive = location === item.path;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg cursor-pointer transition-colors\",\n                  \"hover:bg-secondary/80\",\n                  isActive ? \"bg-primary text-primary-foreground\" : \"text-foreground\"\n                )}\n                data-testid={`nav-${item.path.replace(/\\//g, '-') || 'home'}`}\n              >\n                <Icon className={cn(\"h-4 w-4\", !collapsed && \"min-w-[16px]\")} />\n                {!collapsed && (\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm\">{item.label}</div>\n                    <div className={cn(\n                      \"text-xs truncate\",\n                      isActive ? \"text-primary-foreground/80\" : \"text-muted-foreground\"\n                    )}>\n                      {item.description}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n    </div>\n    \n    {/* Mobile sidebar */}\n    {isOpen && (\n      <div className=\"fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 flex flex-col lg:hidden shadow-xl\">\n        {/* Mobile header */}\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <Shield className=\"text-white text-lg\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-gray-900 dark:text-white\">CyberSec</h1>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">Security Toolkit</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"p-1 h-8 w-8 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\"\n              data-testid=\"button-close-mobile-sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation Items */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          {sidebarItems.map((item) => {\n            const isActive = location === item.path;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.path} href={item.path}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg cursor-pointer transition-colors\",\n                    \"hover:bg-gray-100 dark:hover:bg-gray-800\",\n                    isActive \n                      ? \"bg-blue-600 text-white\" \n                      : \"text-gray-900 dark:text-white\"\n                  )}\n                  onClick={onClose}\n                  data-testid={`nav-mobile-${item.path.replace(/\\//g, '-') || 'home'}`}\n                >\n                  <Icon className=\"h-4 w-4 min-w-[16px]\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm\">{item.label}</div>\n                    <div className={cn(\n                      \"text-xs truncate\",\n                      isActive \n                        ? \"text-blue-100\" \n                        : \"text-gray-600 dark:text-gray-400\"\n                    )}>\n                      {item.description}\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n      </div>\n    )}\n    </>\n  );\n}","size_bytes":6796},"client/src/components/security/file-integrity-monitor.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { FilePen, FolderPlus, Folder, Play, RefreshCw, Edit, Plus, Trash2, History } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface FileChange {\n  type: 'added' | 'modified' | 'deleted';\n  filePath: string;\n  oldHash?: string;\n  newHash?: string;\n  size?: number;\n  timestamp: string;\n}\n\ninterface FileIntegrityResult {\n  directory: string;\n  totalFiles: number;\n  changes: FileChange[];\n  statistics: {\n    modified: number;\n    added: number;\n    deleted: number;\n    unchanged: number;\n  };\n  lastScan: string;\n}\n\nexport function FileIntegrityMonitor() {\n  const [directory, setDirectory] = useState('');\n  const [recursive, setRecursive] = useState(true);\n  const [realTimeAlerts, setRealTimeAlerts] = useState(true);\n  const [emailNotifications, setEmailNotifications] = useState(false);\n  const [integrityResult, setIntegrityResult] = useState<FileIntegrityResult | null>(null);\n  const { toast } = useToast();\n\n  const initBaselineMutation = useMutation({\n    mutationFn: async ({ directory, recursive }: { directory: string; recursive: boolean }) => {\n      const response = await apiRequest('POST', '/api/security/file-integrity-init', { directory, recursive });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Baseline Initialized\",\n        description: `Initialized baseline for ${data.totalFiles} files`,\n      });\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to initialize baseline\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Initialization Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkIntegrityMutation = useMutation({\n    mutationFn: async ({ directory, recursive }: { directory: string; recursive: boolean }) => {\n      const response = await apiRequest('POST', '/api/security/file-integrity-check', { directory, recursive });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIntegrityResult(data);\n      if (data.changes.length > 0) {\n        toast({\n          title: \"Changes Detected\",\n          description: `Found ${data.changes.length} file changes`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"No Changes\",\n          description: \"All files are intact\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to check file integrity\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Integrity Check Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateBaselineMutation = useMutation({\n    mutationFn: async ({ directory, recursive }: { directory: string; recursive: boolean }) => {\n      const response = await apiRequest('POST', '/api/security/file-integrity-update', { directory, recursive });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Baseline Updated\",\n        description: `Updated baseline for ${data.totalFiles} files`,\n      });\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to update baseline\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Update Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInitBaseline = () => {\n    if (directory.trim()) {\n      initBaselineMutation.mutate({ directory: directory.trim(), recursive });\n    }\n  };\n\n  const handleCheckIntegrity = () => {\n    if (directory.trim()) {\n      checkIntegrityMutation.mutate({ directory: directory.trim(), recursive });\n    }\n  };\n\n  const handleUpdateBaseline = () => {\n    if (directory.trim()) {\n      updateBaselineMutation.mutate({ directory: directory.trim(), recursive });\n    }\n  };\n\n  const getChangeIcon = (type: string) => {\n    switch (type) {\n      case 'added': return <Plus className=\"h-4 w-4 text-accent\" />;\n      case 'modified': return <Edit className=\"h-4 w-4 text-chart-3\" />;\n      case 'deleted': return <Trash2 className=\"h-4 w-4 text-destructive\" />;\n      default: return <FilePen className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getChangeColor = (type: string) => {\n    switch (type) {\n      case 'added': return 'bg-accent/10';\n      case 'modified': return 'bg-chart-3/10';\n      case 'deleted': return 'bg-destructive/10';\n      default: return 'bg-muted';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return `${bytes}B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)}MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)}GB`;\n  };\n\n  const formatFilePath = (filePath: string) => {\n    const parts = filePath.split('/');\n    if (parts.length > 3) {\n      return `.../${parts.slice(-2).join('/')}`;\n    }\n    return filePath;\n  };\n\n  const isLoading = initBaselineMutation.isPending || checkIntegrityMutation.isPending || updateBaselineMutation.isPending;\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-chart-5/10 rounded-lg flex items-center justify-center\">\n              <FilePen className=\"text-chart-5 text-xl\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold\">File Integrity Monitoring</h3>\n              <p className=\"text-sm text-muted-foreground\">Monitor file changes and detect unauthorized modifications</p>\n            </div>\n          </div>\n          <Button\n            onClick={handleInitBaseline}\n            disabled={!directory.trim() || isLoading}\n            className=\"bg-chart-5 hover:bg-chart-5/90 text-background\"\n            data-testid=\"button-add-directory\"\n          >\n            <FolderPlus className=\"mr-2 h-4 w-4\" />\n            Add Directory\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Monitoring Controls */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"directory-input\" className=\"block text-sm font-medium mb-2\">\n                Monitor Directory\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"directory-input\"\n                  type=\"text\"\n                  placeholder=\"/path/to/directory\"\n                  value={directory}\n                  onChange={(e) => setDirectory(e.target.value)}\n                  className=\"w-full font-mono text-sm pr-10\"\n                  data-testid=\"input-directory\"\n                />\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                  data-testid=\"button-browse-directory\"\n                >\n                  <Folder className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"recursive-checkbox\"\n                  checked={recursive}\n                  onCheckedChange={(checked) => setRecursive(checked as boolean)}\n                  data-testid=\"checkbox-recursive\"\n                />\n                <Label htmlFor=\"recursive-checkbox\" className=\"text-sm\">\n                  Monitor Subdirectories\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"alerts-checkbox\"\n                  checked={realTimeAlerts}\n                  onCheckedChange={(checked) => setRealTimeAlerts(checked as boolean)}\n                  data-testid=\"checkbox-alerts\"\n                />\n                <Label htmlFor=\"alerts-checkbox\" className=\"text-sm\">\n                  Real-time Alerts\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"email-checkbox\"\n                  checked={emailNotifications}\n                  onCheckedChange={(checked) => setEmailNotifications(checked as boolean)}\n                  data-testid=\"checkbox-email\"\n                />\n                <Label htmlFor=\"email-checkbox\" className=\"text-sm\">\n                  Email Notifications\n                </Label>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Button\n                onClick={handleCheckIntegrity}\n                disabled={!directory.trim() || isLoading}\n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                data-testid=\"button-check-integrity\"\n              >\n                <Play className=\"mr-2 h-4 w-4\" />\n                {checkIntegrityMutation.isPending ? \"Checking...\" : \"Check Integrity\"}\n              </Button>\n              <Button\n                variant=\"secondary\"\n                onClick={handleUpdateBaseline}\n                disabled={!directory.trim() || isLoading}\n                className=\"w-full\"\n                data-testid=\"button-update-baseline\"\n              >\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                {updateBaselineMutation.isPending ? \"Updating...\" : \"Update Baseline\"}\n              </Button>\n            </div>\n          </div>\n\n          {/* File Changes Log */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-secondary rounded-lg\">\n              <div className=\"p-4 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium flex items-center\">\n                    <History className=\"mr-2 h-4 w-4\" />\n                    Recent Changes\n                  </h4>\n                  {integrityResult && (\n                    <Badge className=\"bg-chart-3/20 text-chart-3\" data-testid=\"text-changes-count\">\n                      {integrityResult.changes.length} Changes\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <div className=\"p-4\">\n                <div className=\"space-y-3 max-h-48 overflow-y-auto\">\n                  {integrityResult?.changes.length ? (\n                    integrityResult.changes.slice(0, 10).map((change, index) => (\n                      <div key={index} className={`flex items-start space-x-3 p-3 rounded-lg ${getChangeColor(change.type)}`}>\n                        {getChangeIcon(change.type)}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-mono text-sm truncate\" title={change.filePath}>\n                              {formatFilePath(change.filePath)}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground ml-2\">\n                              {new Date(change.timestamp).toLocaleTimeString()}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            File {change.type}\n                          </p>\n                          <div className=\"flex items-center space-x-4 mt-2 text-xs\">\n                            {change.newHash && (\n                              <span>Hash: <code className=\"text-accent\">{change.newHash.substring(0, 8)}...</code></span>\n                            )}\n                            {change.oldHash && (\n                              <span>Previous Hash: <code className=\"text-muted-foreground\">{change.oldHash.substring(0, 8)}...</code></span>\n                            )}\n                            {change.size && (\n                              <span>Size: {formatFileSize(change.size)}</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : integrityResult ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      <FilePen className=\"h-12 w-12 mx-auto mb-2 text-accent\" />\n                      <p>No file changes detected</p>\n                      <p className=\"text-xs\">All monitored files are intact</p>\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      <FilePen className=\"h-12 w-12 mx-auto mb-2\" />\n                      <p>No integrity checks performed yet</p>\n                      <p className=\"text-xs\">Set up a directory and run an integrity check</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Row */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n          <div className=\"bg-secondary p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-monitored-files\">\n              {integrityResult?.totalFiles || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Files Monitored</div>\n          </div>\n          <div className=\"bg-secondary p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-chart-3\" data-testid=\"text-changes-today\">\n              {integrityResult?.changes.length || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Changes Detected</div>\n          </div>\n          <div className=\"bg-secondary p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-integrity-score\">\n              {integrityResult ? \n                `${(((integrityResult.statistics.unchanged || 0) / integrityResult.totalFiles) * 100).toFixed(1)}%` \n                : '100%'}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Integrity Score</div>\n          </div>\n          <div className=\"bg-secondary p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-last-scan\">\n              {integrityResult ? \n                `${Math.round((Date.now() - new Date(integrityResult.lastScan).getTime()) / 60000)}m`\n                : '--'}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Last Scan</div>\n          </div>\n        </div>\n\n        {isLoading && (\n          <div className=\"mt-4 bg-secondary p-4 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-chart-5\"></div>\n              <span className=\"text-sm\">\n                {initBaselineMutation.isPending && \"Initializing baseline...\"}\n                {checkIntegrityMutation.isPending && \"Checking file integrity...\"}\n                {updateBaselineMutation.isPending && \"Updating baseline...\"}\n              </span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16216},"client/src/components/security/keylogger-detector.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Keyboard, Search, Shield, Eye, AlertTriangle, Trash2 } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SuspiciousProcess {\n  pid: number;\n  name: string;\n  command: string;\n  riskScore: number;\n  reasons: string[];\n  user?: string;\n  cpuUsage?: number;\n  memoryUsage?: number;\n}\n\ninterface KeyloggerDetectionResult {\n  processesScanned: number;\n  suspiciousProcesses: SuspiciousProcess[];\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  recommendations: string[];\n  timestamp: string;\n}\n\nexport function KeyloggerDetector() {\n  const [monitoring, setMonitoring] = useState(true);\n  const [scanResult, setScanResult] = useState<KeyloggerDetectionResult | null>(null);\n  const { toast } = useToast();\n\n  const scanMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/security/keylogger-scan', {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(data);\n      if (data.suspiciousProcesses.length > 0) {\n        toast({\n          title: \"Suspicious Activity Detected\",\n          description: `Found ${data.suspiciousProcesses.length} suspicious processes`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"System Clean\",\n          description: \"No suspicious keylogger activity detected\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to scan for keyloggers\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Scan Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const terminateProcessMutation = useMutation({\n    mutationFn: async (pid: number) => {\n      const response = await apiRequest('POST', '/api/security/terminate-process', { pid });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      if (data.success) {\n        toast({\n          title: \"Process Terminated\",\n          description: `Successfully terminated process ${variables}`,\n        });\n        // Refresh scan results\n        scanMutation.mutate();\n      } else {\n        toast({\n          title: \"Termination Failed\",\n          description: \"Failed to terminate the process\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to terminate process\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Termination Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'low': return 'bg-accent/20 text-accent';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-500';\n      case 'high': return 'bg-orange-500/20 text-orange-500';\n      case 'critical': return 'bg-destructive/20 text-destructive';\n      default: return 'bg-muted/20 text-muted-foreground';\n    }\n  };\n\n  const getProcessRiskColor = (score: number) => {\n    if (score >= 80) return 'text-destructive';\n    if (score >= 60) return 'text-orange-500';\n    if (score >= 40) return 'text-yellow-500';\n    return 'text-muted-foreground';\n  };\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n            <Keyboard className=\"text-chart-4 text-xl\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\">Keylogger Detection</h3>\n            <p className=\"text-sm text-muted-foreground\">Monitor processes for suspicious keylogging activity</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"monitoring-switch\" className=\"text-sm font-medium\">\n              Real-time Monitoring\n            </Label>\n            <Switch\n              id=\"monitoring-switch\"\n              checked={monitoring}\n              onCheckedChange={setMonitoring}\n              data-testid=\"switch-monitoring\"\n            />\n          </div>\n\n          <Button\n            onClick={() => scanMutation.mutate()}\n            disabled={scanMutation.isPending}\n            className=\"w-full bg-chart-4 hover:bg-chart-4/90 text-primary-foreground\"\n            data-testid=\"button-scan-keyloggers\"\n          >\n            <Search className=\"mr-2 h-4 w-4\" />\n            {scanMutation.isPending ? \"Scanning...\" : \"Scan for Keyloggers\"}\n          </Button>\n\n          {scanResult && (\n            <>\n              {/* Detection Results */}\n              <div className=\"bg-secondary rounded-lg\">\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium flex items-center\">\n                      <Shield className=\"mr-2 h-4 w-4\" />\n                      System Status\n                    </h4>\n                    <Badge className={getRiskColor(scanResult.riskLevel)}>\n                      {scanResult.riskLevel === 'low' ? 'Clean' : \n                       scanResult.riskLevel.charAt(0).toUpperCase() + scanResult.riskLevel.slice(1)}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Processes Scanned</span>\n                    <span className=\"font-mono\" data-testid=\"text-processes-scanned\">\n                      {scanResult.processesScanned}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Suspicious Activity</span>\n                    <span className={`font-mono ${scanResult.suspiciousProcesses.length > 0 ? 'text-destructive' : 'text-accent'}`}>\n                      {scanResult.suspiciousProcesses.length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Last Scan</span>\n                    <span className=\"text-muted-foreground\">\n                      {new Date(scanResult.timestamp).toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Suspicious Processes */}\n              {scanResult.suspiciousProcesses.length > 0 && (\n                <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg\">\n                  <div className=\"p-4 border-b border-destructive/20\">\n                    <h4 className=\"font-medium flex items-center text-destructive\">\n                      <AlertTriangle className=\"mr-2 h-4 w-4\" />\n                      Suspicious Processes\n                    </h4>\n                  </div>\n                  <div className=\"p-4 space-y-3 max-h-48 overflow-y-auto\">\n                    {scanResult.suspiciousProcesses.map((process) => (\n                      <div key={process.pid} className=\"flex items-start justify-between p-3 bg-background/50 rounded-lg\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <Badge variant=\"outline\" className=\"font-mono\">\n                              PID {process.pid}\n                            </Badge>\n                            <span className=\"font-medium truncate\">{process.name}</span>\n                            <span className={`text-sm font-bold ${getProcessRiskColor(process.riskScore)}`}>\n                              {process.riskScore}%\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground font-mono truncate mb-2\">\n                            {process.command}\n                          </p>\n                          <div className=\"text-xs text-destructive\">\n                            {process.reasons.map((reason, index) => (\n                              <div key={index}>• {reason}</div>\n                            ))}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => terminateProcessMutation.mutate(process.pid)}\n                          disabled={terminateProcessMutation.isPending}\n                          data-testid={`button-terminate-${process.pid}`}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Recommendations */}\n              {scanResult.recommendations.length > 0 && (\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2 flex items-center\">\n                    <AlertTriangle className=\"mr-2 h-4 w-4\" />\n                    Recommendations\n                  </h4>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    {scanResult.recommendations.map((recommendation, index) => (\n                      <p key={index}>• {recommendation}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Process Monitor */}\n              {monitoring && scanResult.suspiciousProcesses.length === 0 && (\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-3 flex items-center\">\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    Active Monitoring\n                  </h4>\n                  <div className=\"text-sm text-accent text-center py-2\">\n                    System monitoring active - No threats detected\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n\n          {scanMutation.isPending && (\n            <div className=\"bg-secondary p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-chart-4\"></div>\n                <span className=\"text-sm\">Scanning system processes for suspicious activity...</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11323},"client/src/components/security/password-analyzer.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Eye, EyeOff, Key, Check, X, Lightbulb } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\n// Temporary client-side password analysis\nfunction analyzePasswordClientSide(password: string): PasswordAnalysis {\n  const criteria = {\n    length: password.length >= 8,\n    specialChars: /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n    numbers: /\\d/.test(password),\n    upperCase: /[A-Z]/.test(password),\n    lowerCase: /[a-z]/.test(password),\n    noDictionaryWords: !/(password|123456|qwerty|abc123|admin|login|welcome)/.test(password.toLowerCase())\n  };\n\n  let score = 0;\n  if (password.length >= 12) score += 25;\n  else if (password.length >= 8) score += 15;\n  else if (password.length >= 6) score += 10;\n\n  if (criteria.upperCase) score += 10;\n  if (criteria.lowerCase) score += 10;\n  if (criteria.numbers) score += 10;\n  if (criteria.specialChars) score += 15;\n  if (!criteria.noDictionaryWords) score -= 20;\n\n  const charsetSize = \n    (criteria.lowerCase ? 26 : 0) +\n    (criteria.upperCase ? 26 : 0) +\n    (criteria.numbers ? 10 : 0) +\n    (criteria.specialChars ? 32 : 0);\n  \n  const entropy = Math.log2(Math.pow(charsetSize, password.length));\n  if (entropy >= 60) score += 20;\n  else if (entropy >= 50) score += 15;\n  else if (entropy >= 40) score += 10;\n\n  score = Math.max(0, Math.min(100, score));\n\n  const strength = score >= 80 ? 'very-strong' : \n                  score >= 60 ? 'strong' :\n                  score >= 40 ? 'medium' :\n                  score >= 20 ? 'weak' : 'very-weak';\n\n  const suggestions: string[] = [];\n  if (!criteria.length) suggestions.push('Use at least 8 characters (12+ recommended)');\n  if (!criteria.upperCase) suggestions.push('Add uppercase letters (A-Z)');\n  if (!criteria.lowerCase) suggestions.push('Add lowercase letters (a-z)');\n  if (!criteria.numbers) suggestions.push('Include numbers (0-9)');\n  if (!criteria.specialChars) suggestions.push('Add special characters (!@#$%^&*)');\n  if (!criteria.noDictionaryWords) suggestions.push('Avoid common words and phrases');\n\n  const attempts = Math.pow(2, entropy) / 2;\n  const seconds = attempts / 1e10;\n  const crackTime = seconds < 60 ? 'Less than a minute' :\n                   seconds < 3600 ? `${Math.ceil(seconds / 60)} minutes` :\n                   seconds < 86400 ? `${Math.ceil(seconds / 3600)} hours` :\n                   seconds < 2592000 ? `${Math.ceil(seconds / 86400)} days` :\n                   `${Math.ceil(seconds / 2592000)} months`;\n\n  return {\n    score,\n    strength: strength as PasswordAnalysis['strength'],\n    criteria,\n    entropy: Math.round(entropy),\n    suggestions,\n    crackTime\n  };\n}\n\ninterface PasswordAnalysis {\n  score: number;\n  strength: 'very-weak' | 'weak' | 'medium' | 'strong' | 'very-strong';\n  criteria: {\n    length: boolean;\n    specialChars: boolean;\n    numbers: boolean;\n    upperCase: boolean;\n    lowerCase: boolean;\n    noDictionaryWords: boolean;\n  };\n  entropy: number;\n  suggestions: string[];\n  crackTime: string;\n}\n\nexport function PasswordAnalyzer() {\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [analysis, setAnalysis] = useState<PasswordAnalysis | null>(null);\n  const { toast } = useToast();\n\n  const analyzePasswordMutation = useMutation({\n    mutationFn: async (password: string) => {\n      try {\n        // Try backend API first\n        const response = await apiRequest('POST', '/api/security/password-analysis', { password });\n        return response.json();\n      } catch (error) {\n        // Fallback to client-side analysis if backend fails\n        console.log('Backend failed, using client-side analysis');\n        return analyzePasswordClientSide(password);\n      }\n    },\n    onSuccess: (data) => {\n      setAnalysis(data);\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to analyze password\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Analysis Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n    if (value.length > 0) {\n      analyzePasswordMutation.mutate(value);\n    } else {\n      setAnalysis(null);\n    }\n  };\n\n  const getStrengthColor = (strength: string) => {\n    switch (strength) {\n      case 'very-weak': return 'text-destructive';\n      case 'weak': return 'text-orange-500';\n      case 'medium': return 'text-yellow-500';\n      case 'strong': return 'text-accent';\n      case 'very-strong': return 'text-green-500';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 80) return 'bg-green-500';\n    if (score >= 60) return 'bg-accent';\n    if (score >= 40) return 'bg-yellow-500';\n    if (score >= 20) return 'bg-orange-500';\n    return 'bg-destructive';\n  };\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-4 sm:p-6\">\n        <div className=\"flex items-center space-x-3 mb-4 sm:mb-6\">\n          <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n            <Key className=\"text-primary text-lg sm:text-xl\" />\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-base sm:text-lg font-semibold\">Password Strength Analyzer</h3>\n            <p className=\"text-xs sm:text-sm text-muted-foreground\">Analyze password security and get improvement suggestions</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"password-input\" className=\"block text-sm font-medium mb-2\">\n              Enter Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password-input\"\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Type your password here...\"\n                value={password}\n                onChange={(e) => handlePasswordChange(e.target.value)}\n                className=\"w-full font-mono pr-10\"\n                data-testid=\"input-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-password\"\n              >\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {analysis && (\n            <>\n              {/* Password Strength Indicator */}\n              <div className=\"bg-secondary p-3 sm:p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-xs sm:text-sm font-medium\">Strength Score</span>\n                  <span className={`text-sm font-bold ${getStrengthColor(analysis.strength)}`} data-testid=\"text-strength-score\">\n                    {analysis.score}/100\n                  </span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2 mb-3 overflow-hidden\">\n                  <Progress \n                    value={analysis.score} \n                    className={`h-2 transition-all duration-300 ${getProgressColor(analysis.score)}`}\n                  />\n                </div>\n                \n                {/* Strength Criteria */}\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Length (8+ chars)</span>\n                    {analysis.criteria.length ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Special Characters</span>\n                    {analysis.criteria.specialChars ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Numbers</span>\n                    {analysis.criteria.numbers ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Upper & Lower Case</span>\n                    {analysis.criteria.upperCase && analysis.criteria.lowerCase ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>No Dictionary Words</span>\n                    {analysis.criteria.noDictionaryWords ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Entropy Level</span>\n                    <span className=\"text-accent\">{Math.round(analysis.entropy)} bits</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Estimated Crack Time</span>\n                    <span className=\"text-accent\">{analysis.crackTime}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Suggestions */}\n              {analysis.suggestions.length > 0 && (\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2 text-yellow-500 flex items-center\">\n                    <Lightbulb className=\"mr-2 h-4 w-4\" />\n                    Suggestions\n                  </h4>\n                  <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                    {analysis.suggestions.map((suggestion, index) => (\n                      <li key={index}>• {suggestion}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </>\n          )}\n\n          {analyzePasswordMutation.isPending && (\n            <div className=\"bg-secondary p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                <span className=\"text-sm\">Analyzing password...</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11645},"client/src/components/security/phishing-detector.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Fish, Search, Check, X, Info, AlertTriangle } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PhishingAnalysis {\n  score: number;\n  risk: 'low' | 'medium' | 'high' | 'critical';\n  indicators: {\n    ipBasedUrl: boolean;\n    suspiciousSubdomains: boolean;\n    shortUrl: boolean;\n    suspiciousKeywords: boolean;\n    missingHttps: boolean;\n    domainAge: 'new' | 'medium' | 'established' | 'unknown';\n  };\n  details: string[];\n  recommendations: string[];\n}\n\nexport function PhishingDetector() {\n  const [url, setUrl] = useState('');\n  const [analysis, setAnalysis] = useState<PhishingAnalysis | null>(null);\n  const { toast } = useToast();\n\n  const analyzeUrlMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest('POST', '/api/security/phishing-analysis', { url });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAnalysis(data);\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to analyze URL\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Analysis Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (url.trim()) {\n      analyzeUrlMutation.mutate(url.trim());\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'bg-accent/20 text-accent';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-500';\n      case 'high': return 'bg-orange-500/20 text-orange-500';\n      case 'critical': return 'bg-destructive/20 text-destructive';\n      default: return 'bg-muted/20 text-muted-foreground';\n    }\n  };\n\n  const getRiskIcon = (risk: string) => {\n    switch (risk) {\n      case 'low': return <Check className=\"h-4 w-4\" />;\n      case 'medium': return <Info className=\"h-4 w-4\" />;\n      case 'high': \n      case 'critical': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <Info className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-4 sm:p-6\">\n        <div className=\"flex items-center space-x-3 mb-4 sm:mb-6\">\n          <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n            <Fish className=\"text-destructive text-lg sm:text-xl\" />\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-base sm:text-lg font-semibold\">Phishing URL Detection</h3>\n            <p className=\"text-xs sm:text-sm text-muted-foreground\">Detect malicious URLs and phishing attempts</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"url-input\" className=\"block text-sm font-medium mb-2\">\n              URL to Analyze\n            </Label>\n            <Input\n              id=\"url-input\"\n              type=\"url\"\n              placeholder=\"https://example.com\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              className=\"w-full font-mono\"\n              data-testid=\"input-url\"\n            />\n          </div>\n\n          <Button \n            onClick={handleAnalyze}\n            disabled={!url.trim() || analyzeUrlMutation.isPending}\n            className=\"w-full\"\n            data-testid=\"button-analyze-url\"\n          >\n            <Search className=\"mr-2 h-4 w-4\" />\n            <span className=\"hidden sm:inline\">{analyzeUrlMutation.isPending ? \"Analyzing...\" : \"Analyze URL\"}</span>\n            <span className=\"sm:hidden\">{analyzeUrlMutation.isPending ? \"Analyzing...\" : \"Analyze\"}</span>\n          </Button>\n\n          {analysis && (\n            <>\n              {/* Analysis Results */}\n              <div className=\"bg-secondary p-3 sm:p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium\">Security Assessment</h4>\n                  <Badge className={`${getRiskColor(analysis.risk)} flex items-center space-x-1`}>\n                    {getRiskIcon(analysis.risk)}\n                    <span>{analysis.risk.charAt(0).toUpperCase() + analysis.risk.slice(1)} Risk</span>\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Risk Score</span>\n                    <span className=\"font-mono\" data-testid=\"text-risk-score\">{analysis.score}/100</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>IP-based URL</span>\n                    {analysis.indicators.ipBasedUrl ? (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    ) : (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>SSL Certificate</span>\n                    {!analysis.indicators.missingHttps ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Domain Age</span>\n                    <span className={analysis.indicators.domainAge === 'established' ? 'text-accent' : 'text-muted-foreground'}>\n                      {analysis.indicators.domainAge}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Suspicious Keywords</span>\n                    {!analysis.indicators.suspiciousKeywords ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Short URL</span>\n                    {!analysis.indicators.shortUrl ? (\n                      <Check className=\"h-4 w-4 text-accent\" />\n                    ) : (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Detailed Analysis */}\n              <div className=\"bg-muted p-3 sm:p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-2 flex items-center\">\n                  <Info className=\"mr-2 h-4 w-4\" />\n                  Analysis Details\n                </h4>\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  {analysis.details.map((detail, index) => (\n                    <p key={index}>• {detail}</p>\n                  ))}\n                </div>\n              </div>\n\n              {/* Recommendations */}\n              {analysis.recommendations.length > 0 && (\n                <div className=\"bg-muted p-3 sm:p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2 flex items-center\">\n                    <AlertTriangle className=\"mr-2 h-4 w-4\" />\n                    Recommendations\n                  </h4>\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\n                    {analysis.recommendations.map((recommendation, index) => (\n                      <p key={index}>• {recommendation}</p>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8274},"client/src/components/security/port-scanner.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Network, Play, Zap } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface OpenPort {\n  port: number;\n  state: 'open' | 'closed' | 'filtered';\n  service: string;\n  version?: string;\n  banner?: string;\n}\n\ninterface PortScanResult {\n  target: string;\n  totalPorts: number;\n  openPorts: OpenPort[];\n  scanDuration: number;\n  timestamp: string;\n}\n\nexport function PortScanner() {\n  const [target, setTarget] = useState('');\n  const [portRange, setPortRange] = useState('1-1000');\n  const [scanResult, setScanResult] = useState<PortScanResult | null>(null);\n  const { toast } = useToast();\n\n  const scanPortsMutation = useMutation({\n    mutationFn: async ({ target, portRange }: { target: string; portRange: string }) => {\n      const response = await apiRequest('POST', '/api/security/port-scan', { target, portRange });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(data);\n      toast({\n        title: \"Scan Complete\",\n        description: `Found ${data.openPorts.length} open ports on ${data.target}`,\n      });\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to scan ports\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Scan Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const quickScanMutation = useMutation({\n    mutationFn: async (target: string) => {\n      const response = await apiRequest('POST', '/api/security/port-scan-quick', { target });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(data);\n      toast({\n        title: \"Quick Scan Complete\",\n        description: `Found ${data.openPorts.length} open ports on ${data.target}`,\n      });\n    },\n    onError: (error: any) => {\n      // Extract clean error message\n      let errorMessage = \"Failed to perform quick scan\";\n      if (error?.message) {\n        errorMessage = error.message.replace(/^\\d+:\\s*/, ''); // Remove status codes\n      }\n      toast({\n        title: \"Quick Scan Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFullScan = () => {\n    if (target.trim()) {\n      scanPortsMutation.mutate({ target: target.trim(), portRange });\n    }\n  };\n\n  const handleQuickScan = () => {\n    if (target.trim()) {\n      quickScanMutation.mutate(target.trim());\n    }\n  };\n\n  const isScanning = scanPortsMutation.isPending || quickScanMutation.isPending;\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-4 sm:p-6\">\n        <div className=\"flex items-center space-x-3 mb-4 sm:mb-6\">\n          <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n            <Network className=\"text-chart-3 text-lg sm:text-xl\" />\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-base sm:text-lg font-semibold\">Port Scanner</h3>\n            <p className=\"text-xs sm:text-sm text-muted-foreground\">Scan network ports and identify running services</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"target-input\" className=\"block text-sm font-medium mb-2\">\n                Target IP/Domain\n              </Label>\n              <Input\n                id=\"target-input\"\n                type=\"text\"\n                placeholder=\"192.168.1.1 or example.com\"\n                value={target}\n                onChange={(e) => setTarget(e.target.value)}\n                className=\"w-full font-mono text-sm\"\n                data-testid=\"input-target\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"port-range-input\" className=\"block text-sm font-medium mb-2\">\n                Port Range\n              </Label>\n              <Input\n                id=\"port-range-input\"\n                type=\"text\"\n                placeholder=\"1-1000 or 80,443,8080\"\n                value={portRange}\n                onChange={(e) => setPortRange(e.target.value)}\n                className=\"w-full font-mono text-sm\"\n                data-testid=\"input-port-range\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n            <Button\n              onClick={handleFullScan}\n              disabled={!target.trim() || isScanning}\n              className=\"flex-1\"\n              data-testid=\"button-full-scan\"\n            >\n              <Play className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">{scanPortsMutation.isPending ? \"Scanning...\" : \"Start Scan\"}</span>\n              <span className=\"sm:hidden\">{scanPortsMutation.isPending ? \"Scanning...\" : \"Scan\"}</span>\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={handleQuickScan}\n              disabled={!target.trim() || isScanning}\n              className=\"flex-1 sm:flex-none\"\n              data-testid=\"button-quick-scan\"\n            >\n              <Zap className=\"mr-2 h-4 w-4\" />\n              <span className=\"hidden sm:inline\">{quickScanMutation.isPending ? \"Scanning...\" : \"Quick Scan\"}</span>\n              <span className=\"sm:hidden\">{quickScanMutation.isPending ? \"Scanning...\" : \"Quick\"}</span>\n            </Button>\n          </div>\n\n          {scanResult && (\n            <>\n              {/* Scan Results */}\n              <div className=\"bg-secondary rounded-lg\">\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium flex items-center\">\n                      Open Ports Found\n                    </h4>\n                    <Badge className=\"bg-chart-3/20 text-chart-3\" data-testid=\"text-open-ports-count\">\n                      {scanResult.openPorts.length} Active\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Scanned {scanResult.totalPorts} ports on {scanResult.target} in {scanResult.scanDuration}ms\n                  </p>\n                </div>\n                <div className=\"p-4 space-y-3 max-h-64 overflow-y-auto\">\n                  {scanResult.openPorts.length > 0 ? (\n                    scanResult.openPorts.map((port) => (\n                      <div key={port.port} className=\"flex items-center justify-between text-sm\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant=\"outline\" className=\"font-mono text-chart-3 border-chart-3\">\n                            {port.port}\n                          </Badge>\n                          <span>{port.service}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          {port.banner && (\n                            <div className=\"text-accent text-xs\">{port.banner}</div>\n                          )}\n                          {port.version && (\n                            <div className=\"text-muted-foreground text-xs\">{port.version}</div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center text-muted-foreground py-4\">\n                      No open ports found in the specified range\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n\n          {isScanning && (\n            <div className=\"bg-secondary p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-chart-3\"></div>\n                <span className=\"text-sm\">\n                  {quickScanMutation.isPending ? \"Quick scanning common ports...\" : \"Scanning ports...\"}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8700},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}